<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.31 (Ruby 3.2.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-33" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>
    <author initials="Ø." surname="Rønningstad" fullname="Øyvind Rønningstad">
      <organization>Nordic Semiconductor</organization>
      <address>
        <email>oyvind.ronningstad@gmail.com</email>
      </address>
    </author>

    <date year="2025" month="February" day="24"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an Internet of Things (IoT) device), where to find the code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. The transport of firmware images to the devices themselves is important security aspect. Luckily, there are already various device management solutions available offering the distribution of firmware images to IoT devices. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. Firmware signing allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image and to distribute the content encryption key securely. The support for firmware and payload encryption via the SUIT manifest format is described in a companion document <xref target="I-D.ietf-suit-firmware-encryption"/>. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>

<t>This specification defines the SUIT manifest format.
It is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="RFC9124"/>.</t>
  <t>Simple to parse on a constrained node.</t>
  <t>Simple to process on a constrained node.</t>
  <t>Compact encoding.</t>
  <t>Comprehensible by an intermediate system.</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes.</t>
  <t>Extensible.</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as enabling:</t>

<t><list style="symbols">
  <t>a Network Operator to reason about compatibility of a firmware, such as timing and acceptance of firmware updates.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>a device to evaluate the authenticity of a firmware and the authority of the firmware author prior to installation.</t>
  <t>a device to evaluate the applicability of a firmware.</t>
  <t>a device to determine the installation process of a firmware.</t>
  <t>a device to evaluate the authenticity of a firmware pre-boot</t>
  <t>a device to determine the encoding and boot process of a firmware.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="RFC9019"/> and the threats, requirements, and user stories in <xref target="RFC9124"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the SUIT Information Model <xref target="RFC9124"/> that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="RFC9397"/>.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements. Severable elements can be removed from the manifest without impacting its security, see <xref target="severable-fields"/>.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
  <t>Pull parser: A parser that traverses the data and extracts information on an as-needed basis.</t>
  <t>Severable element: An element of the manifest that supports elision of hashed data. If a hash of the data is included in the manifest and the data is included in the envelope, then that data may be elided.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document"><name>How to use this Document</name>

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL (<xref target="RFC8610"/>) definition is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rationale is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> summarizes the mandatory-to-implement features of this specification.</t>

<t>Additional specifications describe functionality needed to implement all of the requirements of <xref target="RFC9124"/>, such as:</t>

<t><list style="symbols">
  <t>Firmware encryption <xref target="I-D.ietf-suit-firmware-encryption"/></t>
  <t>Update management <xref target="I-D.ietf-suit-update-management"/></t>
  <t>Dependency manifests <xref target="I-D.ietf-suit-trust-domains"/></t>
  <t>Secure reporting of the update status <xref target="I-D.ietf-suit-report"/></t>
</list></t>

<t>A technique to compress firmware images may be standardized in the future.</t>

</section>
<section anchor="background"><name>Background</name>

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="RFC9019"/>. The security aspects are described in <xref target="RFC9124"/>.</t>

<section anchor="iot-firmware-update-constraints"><name>IoT Firmware Update Constraints</name>

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>intermittent or unstable connectivity.</t>
  <t>intermittent power, for example due to energy harvesting.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model"><name>SUIT Workflow Model</name>

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
  <t>Verify image(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and invoking images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Invoke image(s).</t>
</list></t>

<t>If verification and invocation is implemented in a bootloader, then the bootloader <bcp14>MUST</bcp14> also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. Because signature verifications can be costly in constrained applications, the bootloader may add its own authentication, e.g., a Message Authentication Code (MAC), to the manifest in order to prevent further signature verifications and save energy, provided that the bootloader can protect its authentication key.</t>

</section>
</section>
<section anchor="metadata-structure-overview"><name>Metadata Structure Overview</name>

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest.</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, such as affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Integrated Payloads     |          +------------------------------+
+-------------------------+          | Structure Version            |
                                     | Sequence Number              |
                                     | Reference to Full Manifest   |
                               +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Components IDs          |      +-> +-----------------------+
| Common Command Sequence ---------> | Command Sequence      |
+-------------------------+          +-----------------------+
                                     | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope"><name>Envelope</name>

<t>The SUIT Envelope is a container that encloses the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that avoids substantial complexity that would be needed with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-auth"><name>Authentication Block</name>

<t>The Authentication Block contains a bstr-wrapped SUIT Digest Container, see <xref target="SUIT_Digest"/>, and one or more <xref target="RFC9052"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest"><name>Manifest</name>

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical"><name>Critical Metadata</name>

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also <bcp14>MAY</bcp14> provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common"><name>Common</name>

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of two parts: a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence <bcp14>MUST NOT</bcp14> have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/> for more detail.</t>

</section>
<section anchor="ovr-commands"><name>Command Sequences</name>

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Payload Fetch, Payload Installation and, System Validation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. An Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command (dependencies are not defined in this specification).</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity"><name>Integrity Check Values</name>

<t>To enable severable elements <xref target="ovr-severable"/>, there needs to be a mechanism to verify the integrity of the severed data. While the severed data stays outside the manifest, for efficiency reasons, Integrity Check Values are used to include the digest of the data in the manifest. Note that Integrated Payloads, see <xref target="ovr-integrated"/>, are integrity-checked using Command Sequences.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text"><name>Human-Readable Text</name>

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable"><name> Severable Elements</name>

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>). This is a form of elision of hashed data. The elements in the envelope are verified by Integrity Check Values and therefore cannot be replaced with other elements even if they are authenticated elements.</t>

<t>Because of this organisation, these elements can be discarded or "Severed" from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated"><name>Integrated Payloads</name>

<t>In some cases, it is beneficial to include a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest's envelope.</t>
</list></t>

<t>See <xref target="template-integrated-payload"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior"><name>Manifest Processor Behavior</name>

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup"><name>Manifest Processor Setup</name>

<t>Prior to executing any command sequence, the manifest processor or its host application <bcp14>MUST</bcp14> inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application <bcp14>MUST</bcp14> extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it <bcp14>MUST</bcp14> select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it <bcp14>MAY</bcp14> select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g., Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Payload verification failed.</t>
  <t>Missing required component from a Component Set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons <bcp14>MAY</bcp14> be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is one possible strategy to provide robustness of the firmware update process. It may not be appropriate for all applications. In particular Trusted Execution Environments <bcp14>MAY</bcp14> require a failure to invoke a new installation, rather than a rollback approach. See <xref section="4.2.1" sectionFormat="comma" target="RFC9124"/> for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks"><name> Required Checks</name>

<t>The manifest processor <bcp14>MUST</bcp14> verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties. When validating authenticity of manifests, the manifest processor <bcp14>MAY</bcp14> use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor <bcp14>MUST</bcp14> examine the component list and
check that the number of components listed in the manifest is not larger than the number in the target system.</t>

<t>For each listed component, the manifest processor <bcp14>MUST</bcp14> provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it <bcp14>MAY</bcp14> process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor <bcp14>SHOULD</bcp14> check that the shared sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the shared sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the shared sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component, each command sequence <bcp14>MUST</bcp14> begin with a Set Component Index <xref target="suit-directive-set-component-index"/>.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it <bcp14>SHOULD</bcp14> verify that all Components in the Component Set are specified by one update, that is:</t>

<t><list style="numbers">
  <t>the manifest Author has sufficient permissions for the requested operations (see <xref target="access-control-lists"/>) and</t>
  <t>the manifest specifies a digest and a payload for every Component in the Component Set.</t>
</list></t>

</section>
<section anchor="interpreter-fundamental-properties"><name>Interpreter Fundamental Properties</name>

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update <bcp14>MUST</bcp14> either result in an error, or a correct system state that can be checked against known digests.</t>
  <t>Executing a Trusted Invocation <bcp14>MUST</bcp14> either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients <bcp14>MUST</bcp14> result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

<section anchor="resilience-to-disruption"><name>Resilience to Disruption</name>

<t>As required in <xref section="3" sectionFormat="of" target="RFC9019"/> and as an extension of design goal 1, devices must remain operable after a disruption, such as a power failure or network interruption, interrupts the update process.</t>

<t>The manifest processor must be resilient to these faults. In order to enable this resilience, systems implementing the manifest processor <bcp14>MUST</bcp14> guarantee that manifests can be either resumed or reapplied.</t>

<t>This can be achieved in a variety of ways:
1. A fallback/recovery image is provided so that a disrupted system can apply the SUIT Manifest again.
2. Manifest Authors construct Manifests in such a way that repeated partial invocations of any Manifest always results in a correct system state. Typically this is done by using Try-Each and Conditions to bypass operations that have already been completed.
3. A journal of manifest operations is stored in nonvolatile memory. The journal enables the parser to re-create the state just prior to the disruption. This journal can, for example, be a SUIT Report or a journaling file system.
4. Where a command is not repeatable because of the way in which it alters system state (e.g., swapping images or in-place delta) it is resumable or revertible. This applies primarily to commands that modify at least one source component as well as the destination component.</t>

</section>
</section>
<section anchor="command-behavior"><name>Abstract Machine Description</name>

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor -- a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions <bcp14>MUST NOT</bcp14> have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives <bcp14>MAY</bcp14> have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter <bcp14>MUST</bcp14> Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object "current" is used. It represents the component identified by the Component Index:</t>

<figure><artwork><![CDATA[
current := components[component-index]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg].</t>

<t>The following table describes the semantics of each operation. The pseudo-code semantics are inspired by the Python programming language.</t>

<texttable>
      <ttcol align='left'>pseudo-code operation</ttcol>
      <ttcol align='left'>Semantics</ttcol>
      <c>assert(test)</c>
      <c>When test is false, causes an error return</c>
      <c>store(dest, source)</c>
      <c>Writes source into dest</c>
      <c>expression0 for-each e in l else expression1</c>
      <c>Performs expression0 once for each element in iterable l; performs expression1 if no break is encountered</c>
      <c>break</c>
      <c>halt a for-each loop</c>
      <c>now()</c>
      <c>return the current UTC time</c>
      <c>expression if test</c>
      <c>performs expression if test is true</c>
</texttable>

<t>The following table describes the behavior of each command. "params" represents the parameters for the current component. Most commands operate on a component.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Check Content</c>
      <c>assert(binary-match(current, current.params[content]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Invoke</c>
      <c>invoke(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Write</c>
      <c>store(current, current.params[content])</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Slot</c>
      <c>assert(current.slot-index == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>(break if (exec(seq) is not error)) for-each seq in arg else assert(0)</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Invoke with Arguments</c>
      <c>invoke(current, arg)</c>
</texttable>

</section>
<section anchor="index-true"><name>Special Cases of Component Index</name>

<t>Component Index can take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers <bcp14>MUST</bcp14> always be supported by Set Component Index. Arrays of integers <bcp14>MUST</bcp14> be supported by Set Component Index if the Recipient supports 3 or more components. True <bcp14>MUST</bcp14> be supported by Set Component Index if the Recipient supports 2 or more components. Each of these operates on the list of components declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) to which each subsequent command applies. The value True replaces the list of component indices with the full list of components, as defined in the manifest.</t>

<t>When a command is executed, it</t>

<t><list style="numbers">
  <t>operates on the component identified by the component index if that index is an integer, or</t>
  <t>it operates on each component identified by an array of indicies, or</t>
  <t>it operates on every component if the index is the boolean True.</t>
</list></t>

<t>This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is True:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else:
    current-list = [ components[component-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component. This means that the sequences that are arguments to Try Each and Run Sequence are not invoked with Component Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index to each index in turn.</t>

</section>
<section anchor="serial-processing"><name>Serialized Processing Interpreter</name>

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor <bcp14>MAY</bcp14> handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component index of True, it does not ignore any commands. It applies them to the current component on each iteration.</t>

</section>
<section anchor="parallel-processing"><name>Parallel Processing Interpreter</name>

<t>To enable parallel or out-of-order processing of Command Sequences, Recipients <bcp14>MAY</bcp14> make use of the Strict Order parameter. The Strict Order parameter indicates to the Manifest Processor that Commands <bcp14>MUST</bcp14> be executed strictly in order. When the Strict Order parameter is False, this indicates to the Manifest Processor that Commands <bcp14>MAY</bcp14> be executed in parallel and/or out of order.</t>

<t>To perform parallel processing, once the Strict Order parameter is set to False, the Recipient <bcp14>MAY</bcp14> add each command to an issue queue for parallel processing or an issue pool for out-of-order processing. The Manifest Processor then executes these pending commands in whatever order or parallelism it deems appropriate. Once there are no more commands to add to the issue queue/pool, the Manifest Processor drains the issue queue/pool by issuing all pending commands and waits for every issued command to complete. The Manifest Processor <bcp14>MAY</bcp14> issue commands before it has completed adding all remaining commands to the issue queue/pool.</t>

<t>While adding commands to the issue queue or pool, if the Manifest Processor encounters any of the following commands, it <bcp14>MUST</bcp14> treat the command as a barrier, draining the issue queue/pool and waiting for all issued commands to complete.</t>

<t><list style="symbols">
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Component Index.</t>
</list></t>

<t>Extensions <bcp14>MAY</bcp14> alter this list. Once all issued commands have completed, the Manifest Processor issues the barrier command, after which it may resume parallel processing if Strict Order is still False.</t>

<t>A Component <bcp14>MUST NOT</bcp14> be both a target of an operation and a source of data (for example, in Copy or Swap) in a Command Sequence where Strict Order is False. This would cause a race condition if the Component is written to, then later read from. The Manifest Processor <bcp14>MUST</bcp14> issue an Abort if it detects this exception.</t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences <bcp14>MAY</bcp14> be run in parallel. There are several invocation options for Run Sequence:</t>

<t><list style="symbols">
  <t>Component Index is a positive integer, Strict Order is False: Strict Order is set to True before the sequence argument is run. The sequence argument <bcp14>MUST</bcp14> begin with set-component-index.</t>
  <t>Component Index is true or an array of positive integers, Strict Order is False: The sequence argument is run once for each component (or each component in the array); the Manifest Processor presets the component index and Strict Order = True before each iteration of the sequence argument.</t>
  <t>Component Index is a positive integer, Strict Order is True: No special considerations</t>
  <t>Component Index is True or an array of positive integers, Strict Order is True: The sequence argument is run once for each component (or each component in the array); the Manifest Processor presets the component index before each iteration of the sequence argument.</t>
</list></t>

<t>These rules isolate each sequence from each other sequence, ensuring that they operate as expected. When Strict Order = False, any further Set Component Index directives in the Run Sequence command sequence argument <bcp14>MUST</bcp14> cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC9052"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author <bcp14>MUST</bcp14> ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True, this means that the parameters consumed by each command <bcp14>MUST</bcp14> have been set for each Component.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <strong>A digest <bcp14>MUST</bcp14> always be set using Override Parameters.</strong></t>

<section anchor="template-compatibility-check"><name>Compatibility Check Template</name>

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the shared sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot"><name>Trusted Invocation Template</name>

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>The system validation sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Invoke directive (see <xref target="suit-directive-invoke"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template"><name>Component Download Template</name>

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-install"><name>Install Template</name>

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload"><name>Integrated Payload Template</name>

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>).</t>

<t>An Author <bcp14>MAY</bcp14> choose to place a payload in the envelope of a manifest. The payload envelope key <bcp14>MUST</bcp14> be a string. The payload <bcp14>MUST</bcp14> be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way <bcp14>MAY</bcp14> be expressed as a fragment-only reference, as defined in <xref section="4.4" sectionFormat="comma" target="RFC3986"/>, for example: "#device-model-v1.2.3.bin".</t>

<t>An intermediary, such as a Network Operator, <bcp14>MAY</bcp14> choose to pre-fetch a payload and add it to the manifest envelope, using the URI as the key.</t>

</section>
<section anchor="template-load-ext"><name>Load from Nonvolatile Storage Template</name>

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="a-b-template"><name>A/B Image Template</name>

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the shared sequence is populated by this template:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
    </list></t>
  <t>Invoke</t>
</list></t>

<t>NOTE: Any test can be used to select between images, Check Slot Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure"><name>Metadata Structure</name>

<t>The metadata for SUIT updates is composed of several primary constituent parts: Authentication Information, Manifest, Severable Elements and Integrated Payloads.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding"><name>Encoding Considerations</name>

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

<t>All CBOR maps in the Manifest and manifest envelope <bcp14>MUST</bcp14> be encoded with the canonical CBOR ordering as defined in <xref target="RFC8949"/>.</t>

</section>
<section anchor="envelope"><name>Envelope</name>

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="authentication-info"><name>Authenticated Manifests</name>

<t>SUIT_Authentication contains a list of elements, which consist of a SUIT_Digest calculated over the manifest, and zero or more SUIT_Authentication_Block's calculated over the SUIT_Digest.</t>

<figure><sourcecode type="cddl-snippet"><![CDATA[
SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]
SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged
]]></sourcecode></figure>

<t>The SUIT_Digest is computed over the bstr-wrapped SUIT_Manifest that is present in the SUIT_Envelope at the suit-manifest key. The SUIT_Digest <bcp14>MUST</bcp14> always be present. The Manifest Processor requires a SUIT_Authentication_Block to be present. The manifest <bcp14>MUST</bcp14> be protected from tampering between the time of creation and the time of signing/MACing.</t>

<t>The SUIT_Authentication_Block is computed using detached payloads, as described in RFC 9052 <xref target="RFC9052"/>. The detached payload in each case is the bstr-wrapped SUIT_Digest at the beginning of the list. Signers (or MAC calculators) <bcp14>MUST</bcp14> verify the SUIT_Digest prior to performing the cryptographic computation to avoid "Time-of-check to time-of-use" type of attack. When multiple SUIT_Authentication_Blocks are present, then each  SUIT_Authentication_Block <bcp14>MUST</bcp14> be computed over the same SUIT_Digest but using a different algorithm or signing/MAC authority. This feature also allows to transition to new algorithms, such as post-quantum cryptography (PQC) algorithms.</t>

<t>The SUIT_Authentication structure <bcp14>MUST</bcp14> come before the suit-manifest element, regardless of canonical encoding of CBOR. The algorithms used in SUIT_Authentication are defined by the profiles declared in <xref target="I-D.ietf-suit-mti"/>.</t>

</section>
<section anchor="manifest-structure"><name>Manifest</name>

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
</list></t>

<t>The Text section, or any Command Sequence of the Update Procedure (Image Fetch, Image Installation and, System Validation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are <bcp14>RECOMMENDED</bcp14> to implement. In particular, the human-readable text <bcp14>SHOULD</bcp14> be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version"><name>suit-manifest-version</name>

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is <bcp14>REQUIRED</bcp14> to implement.</t>

</section>
<section anchor="manifest-seqnr"><name>suit-manifest-sequence-number</name>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. Each Recipient <bcp14>MUST</bcp14> reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer <bcp14>MAY</bcp14> use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is <bcp14>REQUIRED</bcp14> to implement.</t>

</section>
<section anchor="manifest-reference-uri"><name>suit-reference-uri</name>

<t>suit-reference-uri is a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.
This document is only concerned with the transport of a URI which is 
intended for machine readable uses, not human readable uses. The encoding is the same as CBOR
Tag 32, however the tag is omitted because it is implied by context.</t>

</section>
<section anchor="manifest-digest-text"><name>suit-text</name>

<t>suit-text <bcp14>SHOULD</bcp14> be a severable element. suit-text is a map of language identifiers (identical to Tag38 of RFC9290, Appendix A) to language-specific text maps. Each language-specific text map is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>The SUIT_Text_Map is defined in the following CDDL.</t>

<figure><sourcecode type="cddl-snippet"><![CDATA[
tag38-ltag = text .regexp "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"

SUIT_Text_Map = {
    + tag38-ltag => SUIT_Text_LMap
}
SUIT_Text_LMap = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}
]]></sourcecode></figure>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text <bcp14>MUST</bcp14> also be present in suit-common (<xref target="manifest-common"/>).</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section <bcp14>MAY</bcp14> be present. If present, each section <bcp14>MUST</bcp14> be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML-formatted document <xref target="YAML"/> that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition (see <xref target="uuid-identifiers"/>)</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition (see <xref target="uuid-identifiers"/>)</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
</texttable>

<t>suit-text is <bcp14>OPTIONAL</bcp14> to implement.</t>

</section>
<section anchor="manifest-common"><name>suit-common</name>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-components, and suit-shared-sequence. suit-common is <bcp14>REQUIRED</bcp14> to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is <bcp14>REQUIRED</bcp14> to implement.</t>

<t>suit-shared-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-shared-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-shared-sequence is <bcp14>RECOMMENDED</bcp14> to implement. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or command in suit-shared-sequence results in a smaller encoding.</t>

<section anchor="suit-component-identifier"><name>SUIT_Component_Identifier</name>

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h'00']. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path "/usr/bin/env" would encode to ['usr','bin','env'].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands"><name>SUIT_Command_Sequence</name>

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient <bcp14>MUST</bcp14> take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is <bcp14>OPTIONAL</bcp14> to implement because it is not relevant in all bootloaders.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is <bcp14>OPTIONAL</bcp14> to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation. suit-validate is <bcp14>REQUIRED</bcp14> to implement.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is <bcp14>OPTIONAL</bcp14> to implement.</t>
  <t>Invoke or Boot: suit-invoke is a SUIT_Command_Sequence to execute in order to invoke an image. suit-invoke typically contains a single instruction: the "invoke" directive, but may also contain an image condition. suit-invoke is <bcp14>OPTIONAL</bcp14> to implement because it not needed for restart-based invocation.</t>
</list></t>

<t>Goals 1,2,3 form the Update Procedure. Goals 3,4,5 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that <bcp14>MUST</bcp14> be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that <bcp14>MUST</bcp14> be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided. This index is a numeric index into the Component Identifier table defined at the beginning of the manifest.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy"><name>Reporting Policy</name>

<t>To facilitate construction of Reports that describe the success or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor <bcp14>MAY</bcp14> forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine's interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>The Reporting Engine consumes these information elements and decides whether to generate an entry in its report output and which information elements to include based on its internal policy decisions. The Reporting Engine uses the reporting policy provided to it by the SUIT Manifest Processor as a set of hints but <bcp14>MAY</bcp14> choose to ignore these hints and apply its own policy instead.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine <bcp14>MUST</bcp14> receive one set of information elements for each Component, in the order expressed in the Components list or the Component Index array.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which information elements it should aggregate into the Report.</t>

<t>When used in a Invocation Procedure, the output of the Reporting Engine <bcp14>MAY</bcp14> form the basis of an attestation report. When used in an Update Process, the report <bcp14>MAY</bcp14> form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters"><name>SUIT_Parameters</name>

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reuse of parameters between commands, thus reducing manifest size.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Content</c>
      <c>suit-parameter-content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c>Component Slot</c>
      <c>suit-parameter-component-slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Invoke Args</c>
      <c>suit-parameter-invoke-args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately.</t>

<section anchor="cbor-pen"><name>CBOR PEN UUID Namespace Identifier</name>

<t>The CBOR PEN (Private Enterprise Number) UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR absolute OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><sourcecode type="cbor-pretty"><![CDATA[
D8 6F                # tag(111)
   45                # bytes(5)
# Absolute OID encoding of IANA Private Enterprise Number:
#    1.3. 6. 1. 4. 1
      2B 06 01 04 01 # X.690 Clause 8.19
]]></sourcecode></figure>

<t>Computing a version 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 47fbdabb-f2e4-55f0-bb39-3620c2f6df4e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers"><name>Constructing UUIDs</name>

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 9562 <xref target="RFC9562"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient <bcp14>MAY</bcp14> match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They <bcp14>MUST NOT</bcp14> be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host Microcontroller
2. A Wi-Fi module</t>

<t>This same device has three software modules:
1. An operating system
2. A Wi-Fi module interface driver
3. An application</t>

<t>Suppose that the Wi-Fi module's firmware has a proprietary update mechanism and doesn't support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>Wi-Fi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, Wi-Fi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular Wi-Fi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs <bcp14>MUST</bcp14> be created according to versions 3, 4, or 5 of <xref target="RFC9562"/>. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The <bcp14>RECOMMENDED</bcp14> method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
# The IANA UUID Namespace ID for DNS is: 6ba7b810-9dad-11d1-80b4-00c04fd430c8
Vendor ID = UUID5(<IANA UUID Namespace ID DNS>, vendor domain name)
]]></artwork></figure>

<t>In this case, the vendor domain name is a UTF-8 encoded string. Since UUID version 5
applies a digest, internationalization considerations are not applied. The native 
UTF-8 domain name is used.</t>

<t>If the Vendor ID is a UUID, the <bcp14>RECOMMENDED</bcp14> method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the <bcp14>RECOMMENDED</bcp14> method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier"><name>suit-parameter-vendor-identifier</name>

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID <xref target="RFC9562"/></t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="RFC9090"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier"><name>suit-parameter-class-identifier</name>

<t>A RFC 9562 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It <bcp14>MUST</bcp14> be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier"><name>suit-parameter-device-identifier</name>

<t>A RFC 9562 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It <bcp14>MUST</bcp14> be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest"><name>suit-parameter-image-digest</name>

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size"><name>suit-parameter-image-size</name>

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-component-slot"><name>suit-parameter-component-slot</name>

<t>This parameter sets the slot index of a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its index into the component's storage area. This slot <bcp14>MUST</bcp14> be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-content"><name>suit-parameter-content</name>

<t>A block of raw data for use with <xref target="suit-directive-write"/>. It contains a byte string of data to be written to a specified component ID in the same way as a fetch or a copy.</t>

<t>If data is encoded this way, it should be small, e.g., 10's of bytes. Large payloads, e.g., 1000's of bytes, written via this method might prevent the manifest from being held in memory during validation. Typical applications include small configuration parameters.</t>

<t>The size of payload embedded in suit-parameter-content impacts the security requirement defined in <xref target="RFC9124"/>, Section 4.3.21 REQ.SEC.MFST.CONST: Manifest Kept Immutable between Check and Use. Actual limitations on payload size for suit-parameter-content depend on the application, in particular the available memory that satisfies REQ.SEC.MFST.CONST. If the availability of tamper resistant memory is less than the manifest size, then REQ.SEC.MFST.CONST cannot be satisfied.</t>

<t>If suit-parameter-content is instantiated in a severable command sequence, then this becomes functionally very similar to an integrated payload, which may be a better choice.</t>

</section>
<section anchor="suit-parameter-uri"><name>suit-parameter-uri</name>

<t>A URI Reference <xref target="RFC3986"/> from which to fetch a resource. The encoding is the same as CBOR Tag 32, however the tag is omitted because it is implied by the context.
This document is only concerned with the transport of a URI which is 
intended for machine readable uses, not human readable uses.</t>

</section>
<section anchor="suit-parameter-source-component"><name>suit-parameter-source-component</name>

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-invoke-args"><name>suit-parameter-invoke-args</name>

<t>This parameter contains an encoded set of arguments for suit-directive-invoke (<xref target="suit-directive-invoke"/>). The arguments <bcp14>MUST</bcp14> be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-fetch-arguments"><name>suit-parameter-fetch-arguments</name>

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order"><name>suit-parameter-strict-order</name>

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It <bcp14>MAY</bcp14> be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands <bcp14>MUST</bcp14> have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands <bcp14>MUST</bcp14> complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure"><name>suit-parameter-soft-failure</name>

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when the enclosing SUIT_Command_Sequence terminates and suit-parameter-soft-failure reverts to the value it had prior to the invocation of the SUIT_Command_Sequence. Nested SUIT_Command_Sequences do not inherit the enclosing sequence's suit-parameter-soft-failure. It <bcp14>MUST NOT</bcp14> be set outside of suit-directive-try-each or suit-directive-run-sequence, modifying suit-parameter-soft-failure outside of these circumstances causes an Abort.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True in every SUIT_Command_Sequence in the suit-directive-try-each argument. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort. When the enclosing SUIT_Command_Sequence terminates, suit-parameter-soft-failure reverts to the value it held before the SUIT_Command_Sequence was invoked.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom"><name>suit-parameter-custom</name>

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It <bcp14>MUST NOT</bcp14> be used in the shared sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

<t>suit-parameter-custom <bcp14>MAY</bcp14> be consumed by any command, in an application-specific way, however if a suit-parameter-custom is absent, then all standardised suit-commands <bcp14>MUST</bcp14> execute correctly. In this respect, suit-parameter-custom <bcp14>MUST</bcp14> be treated as a hint by any standardised suit-command that consumes it.</t>

</section>
</section>
<section anchor="suitcondition"><name>SUIT_Condition</name>

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Check Content</c>
      <c>suit-condition-check-content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c>Component Slot</c>
      <c>suit-condition-component-slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-command-custom</c>
      <c><xref target="SUIT_Command_Custom"/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition <bcp14>MUST</bcp14> report a result code on completion. If a condition reports failure, then the current sequence of commands <bcp14>MUST</bcp14> terminate. A subsequent command or command sequence <bcp14>MAY</bcp14> continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this <bcp14>MUST</bcp14> be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it <bcp14>MUST</bcp14> report a failure. If a Recipient encounters an unknown condition, it <bcp14>MUST</bcp14> report a failure.</t>

<t>Condition labels greater than or equal to -256 are reserved for IANA registration while those lesser than -256 are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions"><name>suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier</name>

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a UUID <xref target="RFC9562"/> that <bcp14>MUST</bcp14> have already been set as a parameter. The installing Recipient <bcp14>MUST</bcp14> match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component <bcp14>MAY</bcp14> match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are <bcp14>REQUIRED</bcp14> to implement. suit-condition-device-identifier is <bcp14>OPTIONAL</bcp14> to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers <bcp14>MUST</bcp14> be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match"><name>suit-condition-image-match</name>

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component's parameters list. If no digest is specified, the condition fails. suit-condition-image-match is <bcp14>REQUIRED</bcp14> to implement.</t>

</section>
<section anchor="suit-condition-check-content"><name>suit-condition-check-content</name>

<t>This directive compares the specified component identifier to the data indicated by suit-parameter-content. This functions similarly to suit-condition-image-match, however it does a direct, byte-by-byte comparison rather than a digest-based comparison. Because it is possible that an early stop to check-content could reveal information through timing, suit-condition-check-content <bcp14>MUST</bcp14> be constant time: no early exits.</t>

<t>The following pseudo-code described an example content checking algorithm:</t>

<figure><sourcecode type="c"><![CDATA[
// content & component must be same length
// returns 0 for match
int check_content(content, component, length) {
    int residual = 0;
    for (i = 0; i < length; i++) {
        residual |= content[i] ^ component[i];
    }
    return residual;
}
]]></sourcecode></figure>

</section>
<section anchor="suit-condition-component-slot"><name>suit-condition-component-slot</name>

<t>Verify that the slot index of the current component matches the slot index set in suit-parameter-component-slot (<xref target="suit-parameter-component-slot"/>). This condition allows a manifest to select between several images to match a target slot.</t>

</section>
<section anchor="suit-condition-abort"><name>suit-condition-abort</name>

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
</section>
<section anchor="suitdirective"><name>SUIT_Directive</name>
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Write</c>
      <c>suit-directive-write</c>
      <c><xref target="suit-directive-write"/></c>
      <c>Invoke</c>
      <c>suit-directive-invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>Custom Directive</c>
      <c>suit-command-custom</c>
      <c><xref target="SUIT_Command_Custom"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it <bcp14>MUST</bcp14> report a result code. If the Directive reports failure, then the current Command Sequence <bcp14>MUST</bcp14> be terminated.</t>

<section anchor="suit-directive-set-component-index"><name>suit-directive-set-component-index</name>

<t>Set Component Index defines the component to which successive directives and conditions will apply. The Set Component Index arguments are described in <xref target="index-true"/>.</t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value "True" is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-try-each"><name>suit-directive-try-each</name>

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order, until one succeeds or the list is exhausted. Use this command to implement a "try/catch-try/catch" sequence. Manifest processors <bcp14>MAY</bcp14> implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters"><name>suit-directive-override-parameters</name>

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch"><name>suit-directive-fetch</name>

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more payloads. suit-directive-fetch retrieves each component listed in component-index. If component-index is True, instead of an integer, then all current manifest components are fetched. If component-index is an array, then all listed components are fetched.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

<t>The size and digest of the payload to be fetched are typically set prior to the invokation of suit-directive-fetch. If both suit-parameter-image-digest and suit-parameter-image-size are set for the current component when suit-directive-fetch is invoked, the Manifest Processor <bcp14>MAY</bcp14> choose to optimize the fetch by:</t>

<t><list style="symbols">
  <t>Checking if the target component matches the digest supplied before fetching.</t>
  <t>Checking if another component matches the digest supplied before fetching.</t>
</list></t>

<t>The exact mechanisms of these optimizations are implementation defined.</t>

</section>
<section anchor="suit-directive-copy"><name>suit-directive-copy</name>

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

<t>The size and digest of the payload to be fetched are typically set prior to the invokation of suit-directive-copy. If both suit-parameter-image-digest and suit-parameter-image-size are set for the current component when suit-directive-copy is invoked, the Manifest Processor <bcp14>MAY</bcp14> choose to optimize the copy by:</t>

<t><list style="symbols">
  <t>Checking if the target component matches the digest supplied before copying.</t>
  <t>Checking if the source component matches the digest supplied before copying.</t>
</list></t>

<t>The first optimization avoids a copy operation when the data is the same. The second optimization avoids a copy of a corrupted image. The exact mechanisms of these optimizations are implementation defined.</t>

</section>
<section anchor="suit-directive-write"><name>suit-directive-write</name>

<t>This directive writes a small block of data, specified in <xref target="suit-parameter-content"/>, to a component.</t>

<t>Encoding Considerations: Careful consideration must be taken to determine whether it is more appropriate to use an integrated payload or to use <xref target="suit-parameter-content"/> for a particular application. While the encoding of suit-directive-write is smaller than an integrated payload, a large suit-parameter-content payload may prevent the manifest processor from holding the command sequence in memory while executing it.</t>

</section>
<section anchor="suit-directive-invoke"><name>suit-directive-invoke</name>

<t>suit-directive-invoke directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor <bcp14>MAY</bcp14> be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-invoke through suit-parameter-invoke-arguments (<xref target="suit-parameter-invoke-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor <bcp14>MAY</bcp14> resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-run-sequence"><name>suit-directive-run-sequence</name>

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr. This also allows a sequence of instructions to be iterated over, once for each current component index, when component-index = true or component-index = list. See <xref target="index-true"/>.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap"><name>suit-directive-swap</name>

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

</section>
</section>
<section anchor="SUIT_Command_Custom"><name>suit-command-custom</name>

<t>suit-command-custom describes any experimental, proprietary, or application specific condition or directive. This is encoded as an integer, lesser than -256, chosen by the firmware developer. If additional information must be provided, it should be encoded in a custom parameter (as described in <xref target="secparameters"/>). Any number of custom commands is permitted. SUIT_Command_Custom is <bcp14>OPTIONAL</bcp14> to implement.</t>

</section>
<section anchor="integrity-checks"><name>Integrity Check Values</name>

<t>When the Text section or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="implementation-matrix"><name>Implementation Conformance Matrix</name>

<t>This section summarizes the functionality a minimal manifest processor
implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Check Content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Command_Custom"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c><bcp14>REQUIRED</bcp14> if more than one component</c>
      <c>Write Content</c>
      <c><xref target="suit-directive-write"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c><bcp14>REQUIRED</bcp14> for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c><bcp14>REQUIRED</bcp14> for Bootloader</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c><bcp14>REQUIRED</bcp14> for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Invoke Args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
</texttable>

</section>
<section anchor="severable-fields"><name>Severable Elements</name>

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or "Severed" without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>At time of manifest creation, the Author <bcp14>MAY</bcp14> chose to make a manifest element severable by removing it from the manifest, encoding it in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that it can still be authenticated. Making an element severable changes the digest of the manifest, so the signature <bcp14>MUST</bcp14> be computed after manifest elements are made severable. Only Manifest Elements with corresponding elements in the SUIT_Envelope can be made severable (see <xref target="iana-envelope"/> for SUIT_Envelope elements). The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 <bcp14>SHOULD NOT</bcp14> be severable. Elements larger than (Digest Bits)/8 + 4 <bcp14>MAY</bcp14> be severable, while elements that are much larger than (Digest Bits)/8 + 4 <bcp14>SHOULD</bcp14> be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists"><name>Access Control Lists</name>

<t>SUIT Manifest Processors are <bcp14>RECOMMENDED</bcp14> to use one of the following models for managing permissions in the manifest.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest"><name>SUIT Digest Container</name>

<t>The SUIT digest is a CBOR array containing two elements: an algorithm identifier and a bstr containing the bytes of the digest. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The values of the algorithm identifier are found in the IANA "COSE Algorithms" registry <xref target="COSE-Alg"/>, which was created by <xref target="RFC9054"/>. SHA-256 (-16) <bcp14>MUST</bcp14> be implemented by all Manifest Processors.</t>

<t>Any other algorithm defined in the IANA "COSE Algorithms" registry, such as SHA-512 (-44), <bcp14>MAY</bcp14> be implemented in a Manifest Processor.</t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 107 (suggested) in the "CBOR Tags" registry for the SUIT Envelope. The CBOR Tag's Data Item is a SUIT_Envelope as defined in <xref target="full-cddl"/></t>
  <t>allocate CBOR tag 1070 (suggested) in the "CBOR Tags" registry for the SUIT Manifest. The CBOR Tag's Data Item is a SUIT_Manifest as defined in <xref target="full-cddl"/></t>
  <t>allocate media type application/suit-envelope in the "Media Types" registry, see below.</t>
  <t>allocate Namespace CBOR PEN in the "UUID Namespace IDs" registry with value 47fbdabb-f2e4-55f0-bb39-3620c2f6df4e, as defined in <xref target="cbor-pen"/></t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to create a new category for Software Update for the Internet of Things (SUIT)
and a page within this category for SUIT manifests.</t>

<t>IANA is also requested to create several registries defined in the subsections below.</t>

<t>For each registry, values 0-255 are Standards Action and 256 or greater are Specification Required. Negative values -255 to 0 are Standards Action, and -256 and lower are Private Use.</t>

<t>New entries to those registries need to provide a label, a name and a reference to a specification that describes the functionality. More guidance on the expert review can be found below.</t>

<section anchor="iana-envelope"><name>SUIT Envelope Elements</name>

<t>IANA is requested to create a new registry for SUIT envelope elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Unset Detection</c>
      <c><xref target="encoding"/> of [TBD: this document]</c>
      <c>1</c>
      <c>Reserved (Delegation)</c>
      <c><xref target="design-rationale-envelope"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Authentication Wrapper</c>
      <c><xref target="authentication-info"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Manifest</c>
      <c><xref target="manifest-structure"/> of [TBD: this document]</c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>20</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-manifest-elements"><name>SUIT Manifest Elements</name>

<t>IANA is requested to create a new registry for SUIT manifest elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Unset Detection</c>
      <c><xref target="encoding"/> of [TBD: this document]</c>
      <c>1</c>
      <c>Encoding Version</c>
      <c><xref target="manifest-version"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Sequence Number</c>
      <c><xref target="manifest-seqnr"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Common Data</c>
      <c><xref target="manifest-common"/> of [TBD: this document]</c>
      <c>4</c>
      <c>Reference URI</c>
      <c><xref target="manifest-reference-uri"/> of [TBD: this document]</c>
      <c>7</c>
      <c>Image Validation</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>8</c>
      <c>Image Loading</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>9</c>
      <c>Image Invocation</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>20</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-common-elements"><name>SUIT Common Elements</name>

<t>IANA is requested to create a new registry for SUIT common elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Unset Detection</c>
      <c><xref target="encoding"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Component Identifiers</c>
      <c><xref target="manifest-common"/> of [TBD: this document]</c>
      <c>4</c>
      <c>Common Command Sequence</c>
      <c><xref target="manifest-common"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<t>IANA is requested to create a new registry for SUIT commands.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Unset Detection</c>
      <c><xref target="encoding"/> of [TBD: this document]</c>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/> of [TBD: this document]</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/> of [TBD: this document]</c>
      <c>6</c>
      <c>Check Content</c>
      <c><xref target="suit-condition-check-content"/> of [TBD: this document]</c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/> of [TBD: this document]</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/> of [TBD: this document]</c>
      <c>18</c>
      <c>Write Content</c>
      <c><xref target="suit-directive-write"/> of [TBD: this document]</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/> of [TBD: this document]</c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/> of [TBD: this document]</c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/> of [TBD: this document]</c>
      <c>23</c>
      <c>Invoke</c>
      <c><xref target="suit-directive-invoke"/> of [TBD: this document]</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/> of [TBD: this document]</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/> of [TBD: this document]</c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/> of [TBD: this document]</c>
      <c>&lt; -255</c>
      <c>Custom Command</c>
      <c><xref target="SUIT_Command_Custom"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-parameters"><name>SUIT Parameters</name>

<t>IANA is requested to create a new registry for SUIT parameters.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Unset Detection</c>
      <c><xref target="encoding"/> of [TBD: this document]</c>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/> of [TBD: this document]</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/> of [TBD: this document]</c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/> of [TBD: this document]</c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/> of [TBD: this document]</c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/> of [TBD: this document]</c>
      <c>18</c>
      <c>Content</c>
      <c><xref target="suit-parameter-content"/> of [TBD: this document]</c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/> of [TBD: this document]</c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/> of [TBD: this document]</c>
      <c>23</c>
      <c>Invoke Args</c>
      <c><xref target="suit-parameter-invoke-args"/> of [TBD: this document]</c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/> of [TBD: this document]</c>
      <c>&lt; -256</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-text-values"><name>SUIT Text Values</name>

<t>IANA is requested to create a new registry for SUIT text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Unset Detection</c>
      <c><xref target="encoding"/> of [TBD: this document]</c>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>&lt; -256</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-component-text-values"><name> SUIT Component Text Values</name>

<t>IANA is requested to create a new registry for SUIT component text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Unset Detection</c>
      <c><xref target="encoding"/> of [TBD: this document]</c>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>&lt; -256</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="expert-review-instructions"><name>Expert Review Instructions</name>

<t>The IANA registries established in this document allow values to be added
based on expert review. This section gives some general guidelines for
what the experts should be looking for, but they are being designated
as experts for a reason, so they should be given substantial
latitude.</t>

<t>Expert reviewers should take into consideration the following points:</t>

<t><list style="symbols">
  <t>Point squatting should be discouraged.  Reviewers are encouraged
   to get sufficient information for registration requests to ensure
   that the usage is not going to duplicate one that is already
   registered, and that the point is likely to be used in
   deployments.  The zones tagged as private use
   are intended for testing purposes and closed environments;
   code points in other ranges should not be assigned for testing.</t>
  <t>Specifications are required for the standards track range of point
   assignment.  Specifications should exist for  all other ranges,
   but early assignment before a specification is
   available is considered to be permissible.
   When specifications are not provided, the description provided
   needs to have sufficient information to identify what the point is
   being used for.</t>
  <t>Experts should take into account the expected usage of fields when
   approving point assignment.  The fact that there is a range for
   standards track documents does not mean that a standards track
   document cannot have points assigned outside of that range.  The
   length of the encoded value should be weighed against how many
   code points of that length are left, the size of device it will be
   used on, and the number of code points left that encode to that
   size.</t>
  <t>Key assignments in the SUIT Parameters table, particularly those
   that encode to 1 CBOR byte (-24 to 23) should be reserved for
   SUIT Directives that match the same key value.</t>
</list></t>

</section>
<section anchor="media-type-registration"><name>Media Type Registration</name>

<t>This section registers the 'application/suit-envelope+cose' media type in the
"Media Types" registry.  This media type are used to indicate that
the content is a SUIT envelope.</t>

<figure><artwork><![CDATA[
      Type name: application

      Subtype name: suit-envelope+cose

      Required parameters: N/A

      Optional parameters: N/A

      Encoding considerations: binary

      Security considerations: See the Security Considerations section
      of [[This RFC]].

      Interoperability considerations: N/A

      Published specification: [[This RFC]]

      Applications that use this media type: Primarily used for
        Firmware and software updates although the content may
        also contain configuration data and other information
        related to software and firmware.

      Fragment identifier considerations: N/A

      Additional information:

      *  Deprecated alias names for this type: N/A

      *  Magic number(s): N/A

      *  File extension(s): cbor, suit

      *  Macintosh file type code(s): N/A

      Person & email address to contact for further information:
      iesg@ietf.org

      Intended usage: COMMON

      Restrictions on usage: N/A

      Author: Brendan Moran, <brendan.moran.ietf@gmail.com>

      Change Controller: IESG

      Provisional registration?  No
]]></artwork></figure>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

<t>The security requirements outlined in <xref target="RFC9124"/> are addressed by this draft and its extensions.
The specific mapping of requirements and information elements in <xref target="RFC9124"/> to manifest data structures is
outlined in the table below:</t>

<texttable>
      <ttcol align='left'>Security Requirement</ttcol>
      <ttcol align='left'>Information Element</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>REQ.SEC.SEQUENCE</c>
      <c>Monotonic Sequence Number</c>
      <c><xref target="manifest-seqnr"/></c>
      <c>REQ.SEC.COMPATIBLE</c>
      <c>Vendor ID Condition, Class ID Condition</c>
      <c><xref target="identifier-conditions"/></c>
      <c>REQ.SEC.EXP</c>
      <c>Expiration Time</c>
      <c><xref target="I-D.ietf-suit-update-management"/></c>
      <c>REQ.SEC.AUTHENTIC</c>
      <c>Signature, Payload Digests</c>
      <c><xref target="authentication-info"/>, <xref target="suit-condition-image-match"/></c>
      <c>REQ.SEC.AUTH.IMG_TYPE</c>
      <c>Payload Format</c>
      <c><xref target="I-D.ietf-suit-update-management"/></c>
      <c>REQ.SEC.AUTH.IMG_LOC</c>
      <c>Storage Location</c>
      <c><xref target="suit-component-identifier"/></c>
      <c>REQ.SEC.AUTH.REMOTE_LOC</c>
      <c>Payload Indicator</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQ.SEC.AUTH.EXEC</c>
      <c>Payload Digests, Size</c>
      <c><xref target="suit-parameter-image-digest"/>, <xref target="suit-parameter-image-size"/></c>
      <c>REQ.SEC.AUTH.PRECURSOR</c>
      <c>Precursor Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQ.SEC.AUTH.COMPATIBILITY</c>
      <c>Authenticated Vendor and Class IDs</c>
      <c><xref target="suit-parameter-vendor-identifier"/>, <xref target="suit-parameter-class-identifier"/></c>
      <c>REQ.SEC.RIGHTS</c>
      <c>Signature</c>
      <c><xref target="authentication-info"/>, <xref target="access-control-lists"/></c>
      <c>REQ.SEC.IMG.CONFIDENTIALITY</c>
      <c>Encryption Wrapper</c>
      <c><xref target="I-D.ietf-suit-firmware-encryption"/></c>
      <c>REQ.SEC.ACCESS_CONTROL: Access Control</c>
      <c>None</c>
      <c><xref target="access-control-lists"/></c>
      <c>REQ.SEC.MFST.CONFIDENTIALITY</c>
      <c>Manifest Encryption Wrapper / Transport Security</c>
      <c><xref target="I-D.ietf-suit-firmware-encryption"/></c>
      <c>REQ.SEC.IMG.COMPLETE_DIGEST</c>
      <c>Payload Digests</c>
      <c>Implementation Consideration</c>
      <c>REQ.SEC.REPORTING</c>
      <c>None</c>
      <c><xref target="I-D.ietf-suit-report"/>, <xref target="RFC9334"/></c>
      <c>REQ.SEC.KEY.PROTECTION</c>
      <c>None</c>
      <c>Implementation Consideration</c>
      <c>REQ.SEC.KEY.ROTATION</c>
      <c>None</c>
      <c><xref target="I-D.tschofenig-cose-cwt-chain"/>, Implementation Consideration</c>
      <c>REQ.SEC.MFST.CHECK</c>
      <c>None</c>
      <c>Deployment Consideration</c>
      <c>REQ.SEC.MFST.TRUSTED</c>
      <c>None</c>
      <c>Deployment Consideration</c>
      <c>REQ.SEC.MFST.CONST</c>
      <c>None</c>
      <c>Implementation Consideration</c>
      <c>REQ.USE.MFST.PRE_CHECK</c>
      <c>Additional Installation Instructions</c>
      <c><xref target="I-D.ietf-suit-update-management"/></c>
      <c>REQ.USE.MFST.TEXT</c>
      <c>Manifest Text Information</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>REQ.USE.MFST.OVERRIDE_REMOTE</c>
      <c>Aliases</c>
      <c><xref target="RFC3986"/> Relative URIs, <xref target="I-D.ietf-suit-trust-domains"/></c>
      <c>REQ.USE.MFST.COMPONENT</c>
      <c>Dependencies, StorageIdentifier, ComponentIdentifier</c>
      <c><xref target="suit-component-identifier">SUIT_Component_Identifier</xref>, <xref target="I-D.ietf-suit-trust-domains"/></c>
      <c>REQ.USE.MFST.MULTI_AUTH</c>
      <c>Signature</c>
      <c><xref target="authentication-info"/></c>
      <c>REQ.USE.IMG.FORMAT</c>
      <c>Payload Format</c>
      <c><xref target="I-D.ietf-suit-update-management"/></c>
      <c>REQ.USE.IMG.NESTED</c>
      <c>Processing Steps</c>
      <c><xref target="I-D.ietf-suit-firmware-encryption"/> (Encryption Wrapper), <xref target="I-D.ietf-suit-update-management"/> (Payload Format)</c>
      <c>REQ.USE.IMG.VERSIONS</c>
      <c>Required Image Version List</c>
      <c><xref target="I-D.ietf-suit-update-management"/></c>
      <c>REQ.USE.IMG.SELECT</c>
      <c>XIP Address</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>REQ.USE.EXEC</c>
      <c>Runtime Metadata</c>
      <c><xref target="manifest-commands"/> (suit-invoke)</c>
      <c>REQ.USE.LOAD</c>
      <c>Load-Time Metadata</c>
      <c><xref target="manifest-commands"/> (suit-load)</c>
      <c>REQ.USE.PAYLOAD</c>
      <c>Payload</c>
      <c><xref target="template-integrated-payload"/></c>
      <c>REQ.USE.PARSE</c>
      <c>Simple Parsing</c>
      <c><xref target="command-behavior"/></c>
      <c>REQ.USE.DELEGATION</c>
      <c>Delegation Chain</c>
      <c><xref target="I-D.tschofenig-cose-cwt-chain"/></c>
</texttable>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Milosch Meriac"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Geraint Luff"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Dan Ros"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="John-Paul Stanford"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Hugo Vincent"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Carsten Bormann"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Frank Audun Kvamtrø"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Krzysztof Chruściński"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Andrzej Puzdrowski"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Michael Richardson"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="David Brown"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Emmanuel Baccelli"/></t>
      </dd>
    </dl>
  </t>
</list></t>

<t>We would like to thank our responsible area director, Roman Danyliw, for his detailed review.
Finally, we would like to thank our SUIT working group chairs (Dave Thaler, David Waltermire, Russ Housley)
for their feedback and support.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor='RFC9562'>
  <front>
    <title>Universally Unique IDentifiers (UUIDs)</title>
    <author fullname='K. Davis' initials='K.' surname='Davis'/>
    <author fullname='B. Peabody' initials='B.' surname='Peabody'/>
    <author fullname='P. Leach' initials='P.' surname='Leach'/>
    <date month='May' year='2024'/>
    <abstract>
      <t>This specification defines UUIDs (Universally Unique IDentifiers) --
also known as GUIDs (Globally Unique IDentifiers) -- and a Uniform
Resource Name namespace for UUIDs. A UUID is 128 bits long and is
intended to guarantee uniqueness across space and time. UUIDs were
originally used in the Apollo Network Computing System (NCS), later
in the Open Software Foundation's (OSF's) Distributed Computing
Environment (DCE), and then in Microsoft Windows platforms.</t>
      <t>This specification is derived from the OSF DCE specification with the
kind permission of the OSF (now known as "The Open Group"). Information from earlier versions of the OSF DCE specification have
been incorporated into this document. This document obsoletes RFC
4122.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9562'/>
  <seriesInfo name='DOI' value='10.17487/RFC9562'/>
</reference>

<reference anchor='RFC9052'>
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname='J. Schaad' initials='J.' surname='Schaad'/>
    <date month='August' year='2022'/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='96'/>
  <seriesInfo name='RFC' value='9052'/>
  <seriesInfo name='DOI' value='10.17487/RFC9052'/>
</reference>

<reference anchor='RFC3986'>
  <front>
    <title>Uniform Resource Identifier (URI): Generic Syntax</title>
    <author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'/>
    <author fullname='R. Fielding' initials='R.' surname='Fielding'/>
    <author fullname='L. Masinter' initials='L.' surname='Masinter'/>
    <date month='January' year='2005'/>
    <abstract>
      <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='66'/>
  <seriesInfo name='RFC' value='3986'/>
  <seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>

<reference anchor='RFC8949'>
  <front>
    <title>Concise Binary Object Representation (CBOR)</title>
    <author fullname='C. Bormann' initials='C.' surname='Bormann'/>
    <author fullname='P. Hoffman' initials='P.' surname='Hoffman'/>
    <date month='December' year='2020'/>
    <abstract>
      <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
      <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='94'/>
  <seriesInfo name='RFC' value='8949'/>
  <seriesInfo name='DOI' value='10.17487/RFC8949'/>
</reference>

<reference anchor='RFC9019'>
  <front>
    <title>A Firmware Update Architecture for Internet of Things</title>
    <author fullname='B. Moran' initials='B.' surname='Moran'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='D. Brown' initials='D.' surname='Brown'/>
    <author fullname='M. Meriac' initials='M.' surname='Meriac'/>
    <date month='April' year='2021'/>
    <abstract>
      <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
      <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9019'/>
  <seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>

<reference anchor='RFC9124'>
  <front>
    <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
    <author fullname='B. Moran' initials='B.' surname='Moran'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='H. Birkholz' initials='H.' surname='Birkholz'/>
    <date month='January' year='2022'/>
    <abstract>
      <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t>
      <t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9124'/>
  <seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>


<reference anchor='I-D.ietf-suit-mti'>
   <front>
      <title>Mandatory-to-Implement Algorithms for Authors and Recipients of Software Update for the Internet of Things manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Øyvind Rønningstad' initials='O.' surname='Rønningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <author fullname='Akira Tsukamoto' initials='A.' surname='Tsukamoto'>
         <organization>ALAXALA Networks Corp.</organization>
      </author>
      <date day='21' month='October' year='2024'/>
      <abstract>
	 <t>   This document specifies algorithm profiles for SUIT manifest parsers
   and authors to ensure better interoperability.  These profiles apply
   specifically to a constrained node software update use case.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-mti-08'/>
   
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>University of Applied Sciences Bonn-Rhein-Sieg</organization>
      </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='David Brown' initials='D.' surname='Brown'>
         <organization>Linaro</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='29' month='January' year='2025'/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware,
   machine learning models, and personalization data by utilizing the
   IETF SUIT manifest.  Key agreement is provided by ephemeral-static
   (ES) Diffie-Hellman (DH) and AES Key Wrap (AES-KW).  ES-DH uses
   public key cryptography while AES-KW uses a pre-shared key.
   Encryption of the plaintext is accomplished with conventional
   symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-23'/>
   
</reference>


<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='8' month='July' year='2024'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-07'/>
   
</reference>


<reference anchor='I-D.ietf-suit-trust-domains'>
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='4' month='December' year='2024'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT Manifest format
   for use in deployments with multiple trust domains.  A device has
   more than one trust domain when it enables delegation of different
   rights to mutually distrusting entities for use for different
   purposes or Components in the context of firmware or software update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-trust-domains-09'/>
   
</reference>


<reference anchor='I-D.ietf-suit-report'>
   <front>
      <title>Secure Reporting of Update Status</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <date day='21' month='October' year='2024'/>
      <abstract>
	 <t>   The Software Update for the Internet of Things (SUIT) manifest
   provides a way for many different update and boot workflows to be
   described by a common format.  However, this does not provide a
   feedback mechanism for developers in the event that an update or boot
   fails.

   This specification describes a lightweight feedback mechanism that
   allows a developer in possession of a manifest to reconstruct the
   decisions made and actions performed by a manifest processor.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-report-10'/>
   
</reference>

<reference anchor='RFC9090'>
  <front>
    <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
    <author fullname='C. Bormann' initials='C.' surname='Bormann'/>
    <date month='July' year='2021'/>
    <abstract>
      <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
      <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9090'/>
  <seriesInfo name='DOI' value='10.17487/RFC9090'/>
</reference>

<reference anchor='RFC9054'>
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Hash Algorithms</title>
    <author fullname='J. Schaad' initials='J.' surname='Schaad'/>
    <date month='August' year='2022'/>
    <abstract>
      <t>The CBOR Object Signing and Encryption (COSE) syntax (see RFC 9052) does not define any direct methods for using hash algorithms. There are, however, circumstances where hash algorithms are used, such as indirect signatures, where the hash of one or more contents are signed, and identification of an X.509 certificate or other object by the use of a fingerprint. This document defines hash algorithms that are identified by COSE algorithm identifiers.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9054'/>
  <seriesInfo name='DOI' value='10.17487/RFC9054'/>
</reference>

<reference anchor='RFC8610'>
  <front>
    <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
    <author fullname='H. Birkholz' initials='H.' surname='Birkholz'/>
    <author fullname='C. Vigano' initials='C.' surname='Vigano'/>
    <author fullname='C. Bormann' initials='C.' surname='Bormann'/>
    <date month='June' year='2019'/>
    <abstract>
      <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='8610'/>
  <seriesInfo name='DOI' value='10.17487/RFC8610'/>
</reference>


<reference anchor="COSE-Alg" target="https://www.iana.org/assignments/cose/cose.xhtml#algorithms">
  <front>
    <title>CBOR Object Signing and Encryption (COSE) — COSE Algorithms</title>
    <author initials="" surname="IANA">
      <organization>Internet Assigned Numbers Authority</organization>
    </author>
    <date />
  </front>
</reference>


<reference anchor='RFC2119'>
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname='S. Bradner' initials='S.' surname='Bradner'/>
    <date month='March' year='1997'/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='2119'/>
  <seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>

<reference anchor='RFC8174'>
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname='B. Leiba' initials='B.' surname='Leiba'/>
    <date month='May' year='2017'/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='8174'/>
  <seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>



<reference anchor='RFC9397'>
  <front>
    <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
    <author fullname='M. Pei' initials='M.' surname='Pei'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='D. Thaler' initials='D.' surname='Thaler'/>
    <author fullname='D. Wheeler' initials='D.' surname='Wheeler'/>
    <date month='July' year='2023'/>
    <abstract>
      <t>A Trusted Execution Environment (TEE) is an environment that enforces the following: any code within the environment cannot be tampered with, and any data used by such code cannot be read or tampered with by any code outside the environment. This architecture document discusses the motivation for designing and standardizing a protocol for managing the lifecycle of Trusted Applications running inside such a TEE.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9397'/>
  <seriesInfo name='DOI' value='10.17487/RFC9397'/>
</reference>

<reference anchor='RFC9334'>
  <front>
    <title>Remote ATtestation procedureS (RATS) Architecture</title>
    <author fullname='H. Birkholz' initials='H.' surname='Birkholz'/>
    <author fullname='D. Thaler' initials='D.' surname='Thaler'/>
    <author fullname='M. Richardson' initials='M.' surname='Richardson'/>
    <author fullname='N. Smith' initials='N.' surname='Smith'/>
    <author fullname='W. Pan' initials='W.' surname='Pan'/>
    <date month='January' year='2023'/>
    <abstract>
      <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9334'/>
  <seriesInfo name='DOI' value='10.17487/RFC9334'/>
</reference>


<reference anchor='I-D.tschofenig-cose-cwt-chain'>
   <front>
      <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing Chains of CBOR Web Tokens (CWTs)</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='8' month='July' year='2024'/>
      <abstract>
	 <t>   The CBOR Object Signing and Encryption (COSE) message structure uses
   references to keys and defines header parameters to carry chains of
   X.509 certificates.

   This specification extends this functionality to CBOR Web Tokens
   (CWTs).

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-tschofenig-cose-cwt-chain-01'/>
   
</reference>

<reference anchor='RFC7228'>
  <front>
    <title>Terminology for Constrained-Node Networks</title>
    <author fullname='C. Bormann' initials='C.' surname='Bormann'/>
    <author fullname='M. Ersue' initials='M.' surname='Ersue'/>
    <author fullname='A. Keranen' initials='A.' surname='Keranen'/>
    <date month='May' year='2014'/>
    <abstract>
      <t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks. This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='7228'/>
  <seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>


<reference anchor="YAML" target="https://yaml.org/spec/1.2.2/">
  <front>
    <title>YAML Ain’t Markup Language (YAML™) version 1.2</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl"><name>Full CDDL</name>
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message <bcp14>MUST</bcp14> adhere to the following CDDL (<xref target="RFC8610"/>) data definition.</t>

<t>To be valid, the following CDDL <bcp14>MUST</bcp14> have the COSE CDDL appended to it. The COSE CDDL can be obtained by following the directions in <xref section="1.4" sectionFormat="comma" target="RFC9052"/>.</t>

<figure><sourcecode type="cddl" name="draft-ietf-suit-manifest.cddl"><![CDATA[
SUIT_start = SUIT_Envelope_Tagged / SUIT_Manifest_Tagged / start
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * $$SUIT_Envelope_Extensions,
}

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-cose-hash-algs,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
suit-integrated-payload-key = tstr

SUIT_Manifest_Tagged = #6.1070(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Unseverable_Members,
    SUIT_Severable_Members_Choice,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-invoke => bstr .cbor SUIT_Command_Sequence,
  * $$unseverable-manifest-member-extensions,
)

SUIT_Severable_Members_Choice = (
  ? suit-payload-fetch => SUIT_Digest / 
      bstr .cbor SUIT_Command_Sequence,
  ? suit-install => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
  ? suit-text => SUIT_Digest / bstr .cbor SUIT_Text_Map,
  * $$severable-manifest-members-choice-extensions
)

SUIT_Common = {
    ? suit-components             => SUIT_Components,
    ? suit-shared-sequence        => bstr .cbor SUIT_Shared_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Components           = [ + SUIT_Component_Identifier ]

;REQUIRED to implement:
suit-cose-hash-algs /= cose-alg-sha-256

;OPTIONAL to implement:
suit-cose-hash-algs /= cose-alg-shake128
suit-cose-hash-algs /= cose-alg-sha-384
suit-cose-hash-algs /= cose-alg-sha-512
suit-cose-hash-algs /= cose-alg-shake256

SUIT_Component_Identifier =  [* bstr]

SUIT_Shared_Sequence = [
    + ( SUIT_Condition // SUIT_Shared_Commands )
]

SUIT_Shared_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Shared_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Shared_Sequence)
SUIT_Shared_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument_Shared)
SUIT_Shared_Commands //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})

IndexArg /= uint
IndexArg /= true
IndexArg /= [+uint]


SUIT_Directive_Try_Each_Argument_Shared = [
    2* bstr .cbor SUIT_Shared_Sequence,
    ?nil
]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-slot,    SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-check-content,     SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-write,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-invoke,            SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    2* bstr .cbor SUIT_Command_Sequence,
    ?nil
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

$$SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))

cbor-pen = #6.112(bstr)

$$SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
$$SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
$$SUIT_Parameters //= (suit-parameter-image-size => uint)
$$SUIT_Parameters //= (suit-parameter-component-slot => uint)

$$SUIT_Parameters //= (suit-parameter-uri => tstr)
$$SUIT_Parameters //= (suit-parameter-fetch-arguments => bstr)
$$SUIT_Parameters //= (suit-parameter-source-component => uint)
$$SUIT_Parameters //= (suit-parameter-invoke-args => bstr)

$$SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)

$$SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

$$SUIT_Parameters //= (suit-parameter-content => bstr)
$$SUIT_Parameters //= (suit-parameter-strict-order => bool)
$$SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

tag38-ltag = text .regexp "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"
SUIT_Text_Map = {
    + tag38-ltag => SUIT_Text_LMap
}
SUIT_Text_LMap = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-authentication-wrapper = 2
suit-manifest = 3

;REQUIRED to implement:
cose-alg-sha-256 = -16

;OPTIONAL to implement:
cose-alg-shake128 = -18
cose-alg-sha-384 = -43
cose-alg-sha-512 = -44
cose-alg-shake256 = -45

;Unseverable, recipient-necessary
suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-validate = 7
suit-load = 8
suit-invoke = 9
;Severable, recipient-necessary
suit-payload-fetch = 16
suit-install = 20
;Severable, recipient-unnecessary
suit-text = 23

suit-components = 2
suit-shared-sequence = 4

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-component-slot    = 5
suit-condition-check-content     = 6

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24

suit-directive-set-component-index      = 12
suit-directive-try-each                 = 15
suit-directive-write                    = 18
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-invoke                   = 23

suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-component-slot    = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14
suit-parameter-content           = 18

suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-invoke-args       = 23

suit-parameter-device-identifier = 24
suit-parameter-fetch-arguments   = 25

suit-parameter-custom = nint

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
]]></sourcecode></figure>

</section>
<section anchor="examples"><name>Examples</name>

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-slot</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-invoke</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot"><name>Example 0: Secure Boot</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><sourcecode type="cbor-diag" name="example0.cbor-diag"><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'6658ea560262696dd1f13b782239a064da7c6c5cbaf52fded428a6fc83c7e5af'
            ] >>,
            / signature: / << 18([
                / protected / << {
                    / alg / 1:-7 / "ES256" /
                } >>,
                / unprotected / {
                },
                / payload / null / nil /,
                / signature / h'408d0816f9b510749bf6a51b066951e08a4438
f849eb092a1ac768eed9de696c1b1dd35d82ef149e6a73a61976ad2cfe78444b806429
3350a122f332cb49f0da'
            ]) >>
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:0,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768
                    },
                    / condition-vendor-identifier / 1,15,
                    / condition-class-identifier / 2,15
                ] >>
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / invoke / 9:<< [
                / directive-invoke / 23,2
            ] >>
        } >>
    })
]]></sourcecode></figure>

<t>Total size of Envelope without COSE authentication object:  161</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af035871a50101020003585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f0943821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  237</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af584ad28443a10126a0f65840408d08
16f9b510749bf6a51b066951e08a4438f849eb092a1ac768eed9de696c1b
1dd35d82ef149e6a73a61976ad2cfe78444b8064293350a122f332cb49f0
da035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f0943821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload"><name>Example 1: Simultaneous Download and Installation of Payload</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><sourcecode type="cbor-diag" name="example1.cbor-diag"><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'1f2e7acca0dc2786f2fe4eb947f50873a6a3cfaa98866c5b02e621f42074daf2'
            ] >>,
            / signature: / << 18([
                / protected / << {
                    / alg / 1:-7 / "ES256" /
                } >>,
                / unprotected / {
                },
                / payload / null / nil /,
                / signature / h'27a3d7986eddcc1bee04e1436746408c308ed3
c15ac590a1ca0cf96f85671ccac216cb9a1497fc59e21c15f33c95cf75203e25c287b3
1a57d6cd2ef950b27a7a'
            ]) >>
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:1,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768
                    },
                    / condition-vendor-identifier / 1,15,
                    / condition-class-identifier / 2,15
                ] >>
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 20:<< [
                / directive-override-parameters / 20,{
                    / uri / 21:"http://example.com/file.bin"
                },
                / directive-fetch / 21,2,
                / condition-image-match / 3,15
            ] >>
        } >>
    })
]]></sourcecode></figure>

<t>Total size of Envelope without COSE authentication object:  196</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58201f2e7acca0dc2786f2fe4eb947f50873a6
a3cfaa98866c5b02e621f42074daf2035894a50101020103585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f1458258614a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58201f2e7acca0dc2786f2fe4eb947f50873a6
a3cfaa98866c5b02e621f42074daf2584ad28443a10126a0f6584027a3d7
986eddcc1bee04e1436746408c308ed3c15ac590a1ca0cf96f85671ccac2
16cb9a1497fc59e21c15f33c95cf75203e25c287b31a57d6cd2ef950b27a
7a035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f1458258614a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502
030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields"><name>Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><sourcecode type="cbor-diag" name="example2.cbor-diag"><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'6a5197ed8f9dccf733d1c89a359441708e070b4c6dcb9a1c2c82c6165f609b90'
            ] >>,
            / signature: / << 18([
                / protected / << {
                    / alg / 1:-7 / "ES256" /
                } >>,
                / unprotected / {
                },
                / payload / null / nil /,
                / signature / h'073d8d80ca67d61cdf04d813c748b2de98fe78
6fc67b764431307c8dbcbe91dc6f762c2c4d7bb998ff9ead4798e03c8ee26b89ef7a9a
d4569f6e187ce89e16c5'
            ]) >>
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:2,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768
                    },
                    / condition-vendor-identifier / 1,15,
                    / condition-class-identifier / 2,15
                ] >>
            } >>,
            / reference-uri / 4:"https://git.io/JJYoj",
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / invoke / 9:<< [
                / directive-invoke / 23,2
            ] >>,
            / install / 20:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135281bc498'
            ],
            / text / 23:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'302196d452bce5e8bfeaf71e395645ede6d365e63507a081379721eeecf00007'
            ]
        } >>
    })
]]></sourcecode></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  257</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58206a5197ed8f9dccf733d1c89a359441708e
070b4c6dcb9a1c2c82c6165f609b900358d1a80101020203585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f047468747470733a2f2f6769742e696f2f4a4a596f6a074382030f0943
82170214822f5820cfa90c5c58595e7f5119a72f803fd0370b3e6abbec63
15cd38f63135281bc49817822f5820302196d452bce5e8bfeaf71e395645
ede6d365e63507a081379721eeecf00007
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  333</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58206a5197ed8f9dccf733d1c89a359441708e
070b4c6dcb9a1c2c82c6165f609b90584ad28443a10126a0f65840073d8d
80ca67d61cdf04d813c748b2de98fe786fc67b764431307c8dbcbe91dc6f
762c2c4d7bb998ff9ead4798e03c8ee26b89ef7a9ad4569f6e187ce89e16
c50358d1a80101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f047468747470733a2f2f676974
2e696f2f4a4a596f6a074382030f094382170214822f5820cfa90c5c5859
5e7f5119a72f803fd0370b3e6abbec6315cd38f63135281bc49817822f58
20302196d452bce5e8bfeaf71e395645ede6d365e63507a081379721eeec
f00007
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object and Severable Elements:  923</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba4025873825824822f58206a5197ed8f9dccf733d1c89a359441708e
070b4c6dcb9a1c2c82c6165f609b90584ad28443a10126a0f65840073d8d
80ca67d61cdf04d813c748b2de98fe786fc67b764431307c8dbcbe91dc6f
762c2c4d7bb998ff9ead4798e03c8ee26b89ef7a9ad4569f6e187ce89e16
c50358d1a80101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f047468747470733a2f2f676974
2e696f2f4a4a596f6a074382030f094382170214822f5820cfa90c5c5859
5e7f5119a72f803fd0370b3e6abbec6315cd38f63135281bc49817822f58
20302196d452bce5e8bfeaf71e395645ede6d365e63507a081379721eeec
f0000714583c8614a1157832687474703a2f2f6578616d706c652e636f6d
2f766572792f6c6f6e672f706174682f746f2f66696c652f66696c652e62
696e1502030f1759020ba165656e2d5553a20179019d2323204578616d70
6c6520323a2053696d756c74616e656f757320446f776e6c6f61642c2049
6e7374616c6c6174696f6e2c2053656375726520426f6f742c2053657665
726564204669656c64730a0a2020202054686973206578616d706c652063
6f766572732074686520666f6c6c6f77696e672074656d706c617465733a
0a202020200a202020202a20436f6d7061746962696c6974792043686563
6b20287b7b74656d706c6174652d636f6d7061746962696c6974792d6368
65636b7d7d290a202020202a2053656375726520426f6f7420287b7b7465
6d706c6174652d7365637572652d626f6f747d7d290a202020202a204669
726d7761726520446f776e6c6f616420287b7b6669726d776172652d646f
776e6c6f61642d74656d706c6174657d7d290a202020200a202020205468
6973206578616d706c6520616c736f2064656d6f6e737472617465732073
6576657261626c6520656c656d656e747320287b7b6f76722d7365766572
61626c657d7d292c20616e64207465787420287b7b6d616e69666573742d
6469676573742d746578747d7d292e814100a2036761726d2e636f6d0578
525468697320636f6d706f6e656e7420697320612064656d6f6e73747261
74696f6e2e205468652064696765737420697320612073616d706c652070
61747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images"><name>Example 3: A/B images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><sourcecode type="cbor-diag" name="example3.cbor-diag"><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'f6d44a62ec906b392500c242e78e908e9cc5057f3f04104a06a8566200da2ee0'
            ] >>,
            / signature: / << 18([
                / protected / << {
                    / alg / 1:-7 / "ES256" /
                } >>,
                / unprotected / {
                },
                / payload / null / nil /,
                / signature / h'0bbf7058c1a79dff23c7755d36aae5c6cc1aac
b818f456e2e03f2664c369b9c6700931a52f1f8d808aa4a8e5220d479c9661d2bce0a4
4974004325001e3b1abb'
            ]) >>
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:3,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /
                    },
                    / directive-try-each / 15,[
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:0
                            },
                            / condition-component-slot / 5,5,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                                ] >>,
                                / image-size / 14:34768
                            }
                        ] >>,
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:1
                            },
                            / condition-component-slot / 5,5,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                                ] >>,
                                / image-size / 14:76834
                            }
                        ] >>
                    ],
                    / condition-vendor-identifier / 1,15,
                    / condition-class-identifier / 2,15
                ] >>
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 20:<< [
                / directive-try-each / 15,[
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:0
                        },
                        / condition-component-slot / 5,5,
                        / directive-override-parameters / 20,{
                            / uri / 21:"http://example.com/file1.bin"
                        }
                    ] >>,
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:1
                        },
                        / condition-component-slot / 5,5,
                        / directive-override-parameters / 20,{
                            / uri / 21:"http://example.com/file2.bin"
                        }
                    ] >>
                ],
                / directive-fetch / 21,2,
                / condition-image-match / 3,15
            ] >>
        } >>
    })
]]></sourcecode></figure>

<t>Total size of Envelope without COSE authentication object:  320</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820f6d44a62ec906b392500c242e78e908e9c
c5057f3f04104a06a8566200da2ee00359010fa5010102030358a4a20281
81410004589b8814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe025014
92af1425695e48bf429b2d51f2ab450f8258348614a10500050514a20358
24822f582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d058368614a10501050514a2035824822f582001
23456789abcdeffedcba987654321000112233445566778899aabbccddee
ff0e1a00012c22010f020f074382030f14585b860f8258288614a1050005
0514a115781c687474703a2f2f6578616d706c652e636f6d2f66696c6531
2e62696e58288614a10501050514a115781c687474703a2f2f6578616d70
6c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  396</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820f6d44a62ec906b392500c242e78e908e9c
c5057f3f04104a06a8566200da2ee0584ad28443a10126a0f658400bbf70
58c1a79dff23c7755d36aae5c6cc1aacb818f456e2e03f2664c369b9c670
0931a52f1f8d808aa4a8e5220d479c9661d2bce0a44974004325001e3b1a
bb0359010fa5010102030358a4a2028181410004589b8814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258348614a10500050514a2035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0583686
14a10501050514a2035824822f58200123456789abcdeffedcba98765432
1000112233445566778899aabbccddeeff0e1a00012c22010f020f074382
030f14585b860f8258288614a10500050514a115781c687474703a2f2f65
78616d706c652e636f6d2f66696c65312e62696e58288614a10501050514
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-from-external-storage"><name>Example 4: Load from External Storage</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load (<xref target="template-load-ext"/>)</t>
</list></t>

<figure><sourcecode type="cbor-diag" name="example4.cbor-diag"><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'5b5f6586b1e6cdf19ee479a5adabf206581000bd584b0832a9bdaf4f72cdbdd6'
            ] >>,
            / signature: / << 18([
                / protected / << {
                    / alg / 1:-7 / "ES256" /
                } >>,
                / unprotected / {
                },
                / payload / null / nil /,
                / signature / h'c53c2826b042384e95c646cbcd4308b181f1ed
2bfbeb4e70b93cac9fbdc82e382d877e2c2bcfaf975ffcd36941f2f4db89f68d3c77d6
a3506e9b1509a49dec46'
            ]) >>
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:4,
            / common / 3:<< {
                / components / 2:[
                    [h'00'],
                    [h'02'],
                    [h'01']
                ],
                / shared-sequence / 4:<< [
                    / directive-set-component-index / 12,0,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768
                    },
                    / condition-vendor-identifier / 1,15,
                    / condition-class-identifier / 2,15
                ] >>
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0,
                / condition-image-match / 3,15
            ] >>,
            / load / 8:<< [
                / directive-set-component-index / 12,2,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ] >>,
                    / image-size / 14:76834,
                    / source-component / 22:0 / [h'00'] /
                },
                / directive-copy / 22,2,
                / condition-image-match / 3,15
            ] >>,
            / invoke / 9:<< [
                / directive-set-component-index / 12,2,
                / directive-invoke / 23,2
            ] >>,
            / payload-fetch / 16:<< [
                / directive-set-component-index / 12,1,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] >>,
                    / uri / 21:"http://example.com/file.bin"
                },
                / directive-fetch / 21,2,
                / condition-image-match / 3,15
            ] >>,
            / install / 20:<< [
                / directive-set-component-index / 12,0,
                / directive-override-parameters / 20,{
                    / source-component / 22:1 / [h'02'] /
                },
                / directive-copy / 22,2,
                / condition-image-match / 3,15
            ] >>
        } >>
    })
]]></sourcecode></figure>

<t>Total size of Envelope without COSE authentication object:  327</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58205b5f6586b1e6cdf19ee479a5adabf20658
1000bd584b0832a9bdaf4f72cdbdd603590116a801010204035867a20283
814100814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de6
63e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820
00112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100e1987d0010f020f0745840c00030f085838880c0214a3035824822f
58200123456789abcdeffedcba987654321000112233445566778899aabb
ccddeeff0e1a00012c2216001602030f0945840c02170210584e880c0114
a2035824822f582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba987654321015781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e1502030f144b880c0014a116011602030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  403</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58205b5f6586b1e6cdf19ee479a5adabf20658
1000bd584b0832a9bdaf4f72cdbdd6584ad28443a10126a0f65840c53c28
26b042384e95c646cbcd4308b181f1ed2bfbeb4e70b93cac9fbdc82e382d
877e2c2bcfaf975ffcd36941f2f4db89f68d3c77d6a3506e9b1509a49dec
4603590116a801010204035867a20283814100814102814101045858880c
0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e
48bf429b2d51f2ab45035824822f582000112233445566778899aabbccdd
eeff0123456789abcdeffedcba98765432100e1987d0010f020f0745840c
00030f085838880c0214a3035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c2216001602
030f0945840c02170210584e880c0114a2035824822f5820001122334455
66778899aabbccddeeff0123456789abcdeffedcba987654321015781b68
7474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f
144b880c0014a116011602030f
]]></artwork></figure>

</section>
<section anchor="example-5-two-images"><name>Example 5: Two Images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><sourcecode type="cbor-diag" name="example5.cbor-diag"><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'15ce60f77657e4531dc329155f8b0ed78f94bdc6d165b2665473693dcc34f470'
            ] >>,
            / signature: / << 18([
                / protected / << {
                    / alg / 1:-7 / "ES256" /
                } >>,
                / unprotected / {
                },
                / payload / null / nil /,
                / signature / h'53505bf2b1aba7f3c3e142d6c02350daf95331
a8942e77d7378c6670285638e0fe460fe7cebcbe242b14e7ac1a4482cf500136a2568a
92a803f614d5f87ef7a7'
            ]) >>
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:5,
            / common / 3:<< {
                / components / 2:[
                    [h'00'],
                    [h'01']
                ],
                / shared-sequence / 4:<< [
                    / directive-set-component-index / 12,0,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768
                    },
                    / condition-vendor-identifier / 1,15,
                    / condition-class-identifier / 2,15,
                    / directive-set-component-index / 12,1,
                    / directive-override-parameters / 20,{
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                        ] >>,
                        / image-size / 14:76834
                    }
                ] >>
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0,
                / condition-image-match / 3,15,
                / directive-set-component-index / 12,1,
                / condition-image-match / 3,15
            ] >>,
            / invoke / 9:<< [
                / directive-set-component-index / 12,0,
                / directive-invoke / 23,2
            ] >>,
            / install / 20:<< [
                / directive-set-component-index / 12,0,
                / directive-override-parameters / 20,{
                    / uri / 21:"http://example.com/file1.bin"
                },
                / directive-fetch / 21,2,
                / condition-image-match / 3,15,
                / directive-set-component-index / 12,1,
                / directive-override-parameters / 20,{
                    / uri / 21:"http://example.com/file2.bin"
                },
                / directive-fetch / 21,2,
                / condition-image-match / 3,15
            ] >>
        } >>
    })
]]></sourcecode></figure>

<t>Total size of Envelope without COSE authentication object:  306</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582015ce60f77657e4531dc329155f8b0ed78f
94bdc6d165b2665473693dcc34f47003590101a601010205035895a20282
8141008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f0c0114a2035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c220749880c
00030f0c01030f0945840c00170214584f900c0014a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0114
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  382</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582015ce60f77657e4531dc329155f8b0ed78f
94bdc6d165b2665473693dcc34f470584ad28443a10126a0f6584053505b
f2b1aba7f3c3e142d6c02350daf95331a8942e77d7378c6670285638e0fe
460fe7cebcbe242b14e7ac1a4482cf500136a2568a92a803f614d5f87ef7
a703590101a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
822f58200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c220749880c00030f0c01030f0945840c001702
14584f900c0014a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65312e62696e1502030f0c0114a115781c687474703a2f2f657861
6d706c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale"><name>Design Rationale</name>

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency's commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level. Dependency handling is covered in <xref target="I-D.ietf-suit-trust-domains"/>.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope"><name>C.1 Design Rationale: Envelope</name>

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers"><name>C.2 Byte String Wrappers</name>

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the shared sequence. The shared sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+y965Ib2ZEm+B9PEUuaTWWWAJBJskpVKZVWySQ54oi3rmRJ
q5FqywJAABkiMgKKCGQSItk2P/YR9sfsv7Z9iv3d/Sb9JOv34ycuyCSrWn2Z
LrNWMxER5+rHj18+d59MJqPL4+T+aNTkzTo7Tk6S07KY53WWPMyLtNolL2d/
zuZN8m22qbI6K5q0ycsiOTh9+PLbw8ksrbNFcpZVebrO/8qPnpTVRdoky7JK
mvMsOSuXzVVaZcl3m0XaZDU9eFo0WVVkTVIuk9fnebGqk4Oz756+Pkyep0W+
zOpmlM5mVQZDw460H3gjvLAo50V6AUNeVOmymeRZs5zU27yZXMgbk/v3R/mm
Ok6aals39+7e/fruvdEcxrAqq91xUjeLUd1UWXpxnDx9/PrJaASjTI9hNvNt
lTe70VVZvVlV5XZzTD2P3mQ7+GlxbKOfPMKeR6NNfjxKkmo5zxZ1s8NV3GU1
/NKUc/fPvFjA8ukPdVlB38va/t5dRH82VT63l+flxQV8a0/zYp0XoZvsbTNZ
5zBhaGRWruG1Sfn5z+AJLNFFutnA+rpx/LDOLjN86QHMeNuclxWMfgLP8L+8
gAcPp8nzskoL+Y1X+WGVFYu0iJ6U1QrWmvcdSKe6SJ7lF3mTLeR5dpHm6+Nk
xp9OL/DTKW7Ur1f4ZArzGrX6/s00eV3Pz8tlVuSraAC/SYsCyKfzVDo5p8fT
xh5DH2+nsEs9PTzMqzfn5fqvcftZ8ab9JJ7gkyrdFth6lZwBPcTdw9fTmXz9
6zpvpkt7e7rI2oP47TT572mxmGVVPMnfllnRfhIP4mkBhy3u+w18NP2rfPTr
HF+A3ttd/tP/nCbf/tP/VxR43Jp0EfX7T/9zdwkE2vdC3P0LOAH5HA7JRT4v
i8V23pRVPJqSWppWpTXkd7sg7pBfZnhkvn1y+vUXX97Tf9794t4x0HqdjW7r
D/f5h0m6XtX81v2vv/pSPvjq6wdf27dH9s+jew/wn08nj6aOKTR598dlXl0g
b5pkxbzabWiGnZe2xLeQq6SrDI9h9xViMJNFCdOEle48rrINnHYb6dd3YZHy
hU36ARJvfe7m+NWXR/DOfLFYw9+nL88eT07Wq2NaZmHTt5AtKm8+y1e41AlQ
QPLYZgI8Gr48TP75f/zf1EYCbZTA2M4v6lvUlB1++W9i/zKaufX05MXJrej3
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
4yjOggGEuHmSkKe/yCMvWqRtmJH9NdW4ziK7SGhELiJMiuLuIC3q4mMEXb7r
chPK7vlOLTV82+OK2lXOhTNVTe/dyuMuFfKdRcYLl3yqDkqV5ClEOXhbaP2T
9tM2OrUHdjrtHzv5Ofh6MyNBezb14HT6R8NjbSkUQXA76P4k+i2N4PAXQ/yA
zEldtyRNhU5Tl3nposaSYkim0Rr6wCLdZIPJepG8KBmLQOkPfIhKf8OvP231
ua9/O4v/sYssgVvVFiFZeY26nFUZkJcpKMxlwQpqO8HE+T7ke3NnelRaW9UB
EXJbJCGyId7Mmmy6zyrrwCiyOH28Z+gcCo8W1hlnK2irzQKupnuurw++vOPo
AYlLVFdrrZA9hYET545WnjCvxoxDOU/y4rwlDiSmg4bA2ig7LbKqvYMUGX6q
dQsDDPHd7Z7CfqNReIFinyvGJUoQLsguzGAN10jpXV6ePXZl9dDfvUZoLod+
R3lAXQYzJMd8zWV8azICRHA4cnqnYTVQ6wgwQm84EPQnL7UiH8/jso17hmtV
DGzUfAp6Bx5XvLIMmJx96dOnYzhWEq9yCuTEbHpI8ugw0Xzi60STAtQKgmPk
KicBJ5HxUgSuEoHZ2YQSOmjWs/C11VGQcEs2wFBCPnNfrIlJsJ9cUBpy9zMc
3aWPioLuakl8o9g8k5ArTn7lCsVInQwpzS7CAcMrh4yQTY/9c6DrSG+kMZMM
KyFfTeC0wbzayYdAoUK0c+wJsRWkY6DHyk5Qd6UxM1Bq4M84dZzPwEZ6YyxA
kVKYIREjhsyRespUtSBwuYHxXxYGwvbVcdl0lmqOC2dn6uOiHJCdMLKKDyqT
SsnRQNbb55+faDRH27WXNcIw+nSWzz8ni89plLiQncWvZdGAN1nyi7l/j4Mr
BTpKwHrnnGqlQbQtiAjVGXvENs1pArUBV1FspLZTa4jri4UyMMQNOGnuUJSU
cRdf0jbwgCArM5YLhNXJ/stNA3BuErJ0CI31QRaua6yUbwJ4j2J7kOItNJ4x
4xIeb+1k8+gT6H84Jk7VIPl2u80XkzwgHP3nPfFrN/gayawnlqaPyjj94QTT
H/ZQV08jRhN5J5UeHzcumfjXTJKdk0GO3CC/sMCOvNCaoQ8x7WJZKRZS+/Px
/aifS30pvkpeP37cgc5FnMMyzYhNpEWZ/+ZJjWFDj0LAGP9whub9IXqj9ZCL
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
wlUgB1PndAg8k3Idwv3+Te1/ALlJIXrXcQIA

-->

</rfc>

