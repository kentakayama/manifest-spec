<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.31 (Ruby 3.2.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-26" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>
    <author initials="Ø." surname="Rønningstad" fullname="Øyvind Rønningstad">
      <organization>Nordic Semiconductor</organization>
      <address>
        <email>oyvind.ronningstad@gmail.com</email>
      </address>
    </author>

    <date year="2024" month="July" day="08"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. The transport of firmware images to the devices themselves is important security aspect. Luckily, there are already various device management solutions available offering the distribution of firmware images to IoT devices. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. Firmware signing allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image and to distribute the content encryption key securely. The support for firmware and payload encryption via the SUIT manifest format is described in a companion document <xref target="I-D.ietf-suit-firmware-encryption"/>. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>

<t>This specification defines the SUIT manifest format.
It is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="RFC9124"/>.</t>
  <t>Simple to parse on a constrained node.</t>
  <t>Simple to process on a constrained node.</t>
  <t>Compact encoding.</t>
  <t>Comprehensible by an intermediate system.</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes.</t>
  <t>Extensible.</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Network Operator to reason about compatibility of a firmware, such as timing and acceptance of firmware updates.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="RFC9019"/> and the threats, requirements, and user stories in <xref target="RFC9124"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the SUIT Information Model <xref target="RFC9124"/> that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="RFC9397"/>.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements. Severable elements can be removed from the manifest without impacting its security, see <xref target="severable-fields"/>.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
  <t>Pull parser: A parser that traverses the data and extracts information on an as-needed basis.</t>
  <t>Severable element: An element of the manifest that supports elision of hashed data. If a hash of the data is included in the manifest and the data is included in the envelope, then that data may be elided.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document"><name>How to use this Document</name>

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rationale is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> summarizes the mandatory-to-implement features of this specification.</t>

<t>Additional specifications describe functionality needed to implement all of the requirements of <xref target="RFC9124"/>, such as:</t>

<t><list style="symbols">
  <t>Firmware encryption <xref target="I-D.ietf-suit-firmware-encryption"/></t>
  <t>Update management <xref target="I-D.ietf-suit-update-management"/></t>
  <t>Dependency manifests <xref target="I-D.ietf-suit-trust-domains"/></t>
  <t>Secure reporting of the update status <xref target="I-D.ietf-suit-report"/></t>
</list></t>

<t>A technique to compress firmware images may be standardized in the future.</t>

</section>
<section anchor="background"><name>Background</name>

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="RFC9019"/>. The security aspects are described in <xref target="RFC9124"/>.</t>

<section anchor="iot-firmware-update-constraints"><name>IoT Firmware Update Constraints</name>

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model"><name>SUIT Workflow Model</name>

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
  <t>Verify image(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and invoking images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Invoke image(s).</t>
</list></t>

<t>If verification and invocation is implemented in a bootloader, then the bootloader <bcp14>MUST</bcp14> also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. Because signature verifications can be costly in constrained applications, the bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further signature verifications and save energy, provided that the bootloader can protect its authentication key.</t>

</section>
</section>
<section anchor="metadata-structure-overview"><name>Metadata Structure Overview</name>

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest.</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, such as affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Integrated Payloads     |          +------------------------------+
+-------------------------+          | Structure Version            |
                                     | Sequence Number              |
                                     | Reference to Full Manifest   |
                               +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Components IDs          |      +-> +-----------------------+
| Common Command Sequence ---------> | Command Sequence      |
+-------------------------+          +-----------------------+
                                     | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope"><name>Envelope</name>

<t>The SUIT Envelope is a container that encloses the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that avoids substantial complexity that would be needed with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-auth"><name>Authentication Block</name>

<t>The Authentication Block contains a bstr-wrapped SUIT Digest Container, see <xref target="SUIT_Digest"/>, and one or more <xref target="RFC9052"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest"><name>Manifest</name>

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical"><name>Critical Metadata</name>

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also <bcp14>MAY</bcp14> provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common"><name>Common</name>

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of two parts: a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence <bcp14>MUST NOT</bcp14> have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/> for more detail.</t>

</section>
<section anchor="ovr-commands"><name>Command Sequences</name>

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Payload Fetch, Payload Installation and, System Validation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. An Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command (dependencies are not defined in this specification).</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity"><name>Integrity Check Values</name>

<t>To enable severable elements <xref target="ovr-severable"/>, there needs to be a mechanism to verify the integrity of the severed data. While the severed data stays outside the manifest, for efficiency reasons, Integrity Check Values are used to include the digest of the data in the manifest. Note that Integrated Payloads, see <xref target="ovr-integrated"/>, are integrity-checked using Command Sequences.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text"><name>Human-Readable Text</name>

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable"><name> Severable Elements</name>

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>). This is a form of elision of hashed data. The elements in the envelope are verified by Integrity Check Values and therefore cannot be replaced with other elements even if they are authenticated elements.</t>

<t>Because of this organisation, these elements can be discarded or "Severed" from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated"><name>Integrated Payloads</name>

<t>In some cases, it is beneficial to include a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest's envelope.</t>
</list></t>

<t>See <xref target="template-integrated-payload"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior"><name>Manifest Processor Behavior</name>

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup"><name>Manifest Processor Setup</name>

<t>Prior to executing any command sequence, the manifest processor or its host application <bcp14>MUST</bcp14> inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application <bcp14>MUST</bcp14> extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it <bcp14>MUST</bcp14> select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it <bcp14>MAY</bcp14> select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Payload verification failed.</t>
  <t>Missing required component from a Component Set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons <bcp14>MAY</bcp14> be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is one possible strategy to provide robustness of the firmware update process. It may not be appropriate for all applications. In particular Trusted Execution Environments <bcp14>MAY</bcp14> require a failure to invoke a new installation, rather than a rollback approach. See <xref section="4.2.1" sectionFormat="comma" target="RFC9124"/> for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks"><name> Required Checks</name>

<t>The <bcp14>RECOMMENDED</bcp14> process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor <bcp14>MAY</bcp14> use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor <bcp14>MUST</bcp14> examine the component list and
check that the number of components listed in the manifest is not larger than the number in the target system.</t>

<t>For each listed component, the manifest processor <bcp14>MUST</bcp14> provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it <bcp14>MAY</bcp14> process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor <bcp14>SHOULD</bcp14> check that the shared sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the shared sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the shared sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component, each command sequence <bcp14>MUST</bcp14> begin with a Set Component Index <xref target="suit-directive-set-component-index"/>.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it <bcp14>SHOULD</bcp14> verify that all Components in the Component Set are specified by one update, that is:</t>

<t><list style="numbers">
  <t>the manifest Author has sufficient permissions for the requested operations (see <xref target="access-control-lists"/>) and</t>
  <t>the manifest specifies a digest and a payload for every Component in the Component Set.</t>
</list></t>

</section>
<section anchor="interpreter-fundamental-properties"><name>Interpreter Fundamental Properties</name>

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update <bcp14>MUST</bcp14> either result in an error, or a correct system state that can be checked against known digests.</t>
  <t>Executing a Trusted Invocation <bcp14>MUST</bcp14> either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients <bcp14>MUST</bcp14> result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

<section anchor="resilience-to-disruption"><name>Resilience to Disruption</name>

<t>As required in <xref section="3" sectionFormat="of" target="RFC9019"/> and as an extension of design goal 1, devices must remain operable after a disruption, such as a power failure or network interruption, interrupts the update process.</t>

<t>The manifest processor must be resilient to these faults. In order to enable this resilience, systems implementing the manifest processor <bcp14>MUST</bcp14> make the following guarantees:</t>

<t>One of:
1. A fallback/recovery image is provided so that a disrupted system can apply the SUIT Manifest again.
2. Manifest Authors <bcp14>MUST</bcp14> construct Manifests in such a way that repeated partial invocations of any Manifest always results in a correct system state. Typically this is done by using Try-Each and Conditions to bypass operations that have already been completed.
3. A journal of manifest operations is stored in nonvolatile memory. The journal enables the parser to re-create the state just prior to the disruption. This journal can, for example, be a SUIT Report or a journaling file system.</t>

<figure><artwork><![CDATA[
AND
]]></artwork></figure>

<t><list style="numbers">
  <t>Where a command is not repeatable because of the way in which it alters system state (e.g. swapping images or in-place delta) it <bcp14>MUST</bcp14> be resumable or revertible. This applies to commands that modify at least one source component as well as the destination component.</t>
</list></t>

</section>
</section>
<section anchor="command-behavior"><name>Abstract Machine Description</name>

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor -- a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions <bcp14>MUST NOT</bcp14> have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives <bcp14>MAY</bcp14> have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter <bcp14>MUST</bcp14> Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object "current" is used. It represents the component identified by the Component Index:</t>

<figure><artwork><![CDATA[
current := components[component-index]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg].</t>

<t>The following table describes the semantics of each operation. The pseudo-code semantics are inspired by the Python programming language.</t>

<texttable>
      <ttcol align='left'>pseudo-code operation</ttcol>
      <ttcol align='left'>Semantics</ttcol>
      <c>assert(test)</c>
      <c>When test is false, causes an error return</c>
      <c>store(dest, source)</c>
      <c>Writes source into dest</c>
      <c>expression0 for-each e in l else expression1</c>
      <c>Performs expression0 once for each element in iterable l; performs expression1 if no break is encountered</c>
      <c>break</c>
      <c>halt a for-each loop</c>
      <c>now()</c>
      <c>return the current UTC time</c>
      <c>expression if test</c>
      <c>performs expression if test is true</c>
</texttable>

<t>The following table describes the behavior of each command. "params" represents the parameters for the current component. Most commands operate on a component.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Check Content</c>
      <c>assert(binary-match(current, current.params[content]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Invoke</c>
      <c>invoke(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Write</c>
      <c>store(current, current.params[content])</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Slot</c>
      <c>assert(current.slot-index == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>(break if (exec(seq) is not error)) for-each seq in arg else assert(0)</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Invoke with Arguments</c>
      <c>invoke(current, arg)</c>
</texttable>

</section>
<section anchor="index-true"><name>Special Cases of Component Index</name>

<t>Component Index can take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers <bcp14>MUST</bcp14> always be supported by Set Component Index. Arrays of integers <bcp14>MUST</bcp14> be supported by Set Component Index if the Recipient supports 3 or more components. True <bcp14>MUST</bcp14> be supported by Set Component Index if the Recipient supports 2 or more components. Each of these operates on the list of components declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) to which each subsequent command applies. The value True replaces the list of component indices with the full list of components, as defined in the manifest.</t>

<t>When a command is executed, it</t>

<t><list style="numbers">
  <t>operates on the component identified by the component index if that index is an integer, or</t>
  <t>it operates on each component identified by an array of indicies, or</t>
  <t>it operates on every component if the index is the boolean True.</t>
</list></t>

<t>This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is True:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else:
    current-list = [ components[component-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component. This means that the sequences that are arguments to Try Each and Run Sequence are not invoked with Component Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index to each index in turn.</t>

</section>
<section anchor="serial-processing"><name>Serialized Processing Interpreter</name>

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor <bcp14>MAY</bcp14> handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component index of True, it does not ignore any commands. It applies them to the current component on each iteration.</t>

</section>
<section anchor="parallel-processing"><name>Parallel Processing Interpreter</name>

<t>To enable parallel or out-of-order processing of Command Sequences, Recipients <bcp14>MAY</bcp14> make use of the Strict Order parameter. The Strict Order parameter indicates to the Manifest Processor that Commands <bcp14>MUST</bcp14> be executed strictly in order. When the Strict Order parameter is False, this indicates to the Manifest Processor that Commands <bcp14>MAY</bcp14> be executed in parallel and/or out of order.</t>

<t>To perform parallel processing, once the Strict Order parameter is set to False, the Recipient <bcp14>MAY</bcp14> add each command to an issue queue for parallel processing or an issue pool for out-of-order processing. The Manifest Processor then executes these pending commands in whatever order or parallelism it deems appropriate. Once there are no more commands to add to the issue queue/pool, the Manifest Processor drains the issue queue/pool by issuing all pending commands and waits for every issued command to complete. The Manifest Processor <bcp14>MAY</bcp14> issue commands before it has completed adding all remaining commands to the issue queue/pool.</t>

<t>While adding commands to the issue queue or pool, if the Manifest Processor encounters any of the following commands, it <bcp14>MUST</bcp14> treat the command as a barrier, draining the issue queue/pool and waiting for all issued commands to complete.</t>

<t><list style="symbols">
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Component Index.</t>
</list></t>

<t>Extensions <bcp14>MAY</bcp14> alter this list. Once all issued commands have completed, the Manifest Processor issues the barrier command, after which it may resume parallel processing if Strict Order is still False.</t>

<t>A Component <bcp14>MUST NOT</bcp14> be both a target of an operation and a source of data (for example, in Copy or Swap) in a Command Sequence where Strict Order is False. This would cause a race condition if the Component is written to, then later read from. The Manifest Processor <bcp14>MUST</bcp14> issue an Abort if it detects this exception.</t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences <bcp14>MAY</bcp14> be run in parallel. There are several invocation options for Run Sequence:</t>

<t><list style="symbols">
  <t>Component Index is a positive integer, Strict Order is False: Strict Order is set to True before the sequence argument is run. The sequence argument <bcp14>MUST</bcp14> begin with set-component-index.</t>
  <t>Component Index is true or an array of positive integers, Strict Order is False: The sequence argument is run once for each component (or each component in the array); the Manifest Processor presets the component index and Strict Order = True before each iteration of the sequence argument.</t>
  <t>Component Index is a positive integer, Strict Order is True: No special considerations</t>
  <t>Component Index is True or an array of positive integers, Strict Order is True: The sequence argument is run once for each component (or each component in the array); the Manifest Processor presets the component index before each iteration of the sequence argument.</t>
</list></t>

<t>These rules isolate each sequence from each other sequence, ensuring that they operate as expected. When Strict Order = False, any further Set Component Index directives in the Run Sequence command sequence argument <bcp14>MUST</bcp14> cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC9052"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author <bcp14>MUST</bcp14> ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True, this means that the parameters consumed by each command <bcp14>MUST</bcp14> have been set for each Component.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <strong>A digest <bcp14>MUST</bcp14> always be set using Override Parameters.</strong></t>

<section anchor="template-compatibility-check"><name>Compatibility Check Template</name>

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the shared sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot"><name>Trusted Invocation Template</name>

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>The system validation sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Invoke directive (see <xref target="suit-directive-invoke"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template"><name>Component Download Template</name>

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-install"><name>Install Template</name>

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload"><name>Integrated Payload Template</name>

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>).</t>

<t>An Author <bcp14>MAY</bcp14> choose to place a payload in the envelope of a manifest. The payload envelope key <bcp14>MUST</bcp14> be a string. The payload <bcp14>MUST</bcp14> be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way <bcp14>MAY</bcp14> be expressed as a fragment-only reference, as defined in <xref section="4.4" sectionFormat="comma" target="RFC3986"/>, for example: "#device-model-v1.2.3.bin".</t>

<t>An intermediary, such as a Network Operator, <bcp14>MAY</bcp14> choose to pre-fetch a payload and add it to the manifest envelope, using the URI as the key.</t>

</section>
<section anchor="template-load-ext"><name>Load from Nonvolatile Storage Template</name>

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Source Component (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="a-b-template"><name>A/B Image Template</name>

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the shared sequence is populated by this template:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot A</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Slot B</t>
          <t>Check Slot Condition (see <xref target="suit-condition-component-slot"/>)</t>
        </list></t>
    </list></t>
  <t>Invoke</t>
</list></t>

<t>NOTE: Any test can be used to select between images, Check Slot Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure"><name>Metadata Structure</name>

<t>The metadata for SUIT updates is composed of several primary constituent parts: Authentication Information, Manifest, Severable Elements and Integrated Payloads.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations"><name>Encoding Considerations</name>

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

<t>All CBOR maps in the Manifest and manifest envelope <bcp14>MUST</bcp14> be encoded with the canonical CBOR ordering as defined in <xref target="RFC8949"/>.</t>

</section>
<section anchor="envelope"><name>Envelope</name>

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="authentication-info"><name>Authenticated Manifests</name>

<t>SUIT_Authentication contains a list of elements, which consist of a SUIT_Digest calculated over the manifest, and zero or more SUIT_Authentication_Block's calculated over the SUIT_Digest.</t>

<figure><artwork><![CDATA[
SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]
SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged
]]></artwork></figure>

<t>The SUIT_Digest is computed over the bstr-wrapped SUIT_Manifest that is present in the SUIT_Envelope at the suit-manifest key. The SUIT_Digest <bcp14>MUST</bcp14> always be present. The Manifest Processor requires a SUIT_Authentication_Block to be present. The manifest <bcp14>MUST</bcp14> be protected from tampering between the time of creation and the time of signing/MACing.</t>

<t>The SUIT_Authentication_Block is computed using detached payloads, as described in RFC 9052 <xref target="RFC9052"/>. The detached payload in each case is the bstr-wrapped SUIT_Digest at the beginning of the list. Signers (or MAC calculators) <bcp14>MUST</bcp14> verify the SUIT_Digest prior to performing the cryptographic computation to avoid "Time-of-check to time-of-use" type of attack. When multiple SUIT_Authentication_Blocks are present, then each  SUIT_Authentication_Block <bcp14>MUST</bcp14> be computed over the same SUIT_Digest but using a different algorithm or signing/MAC authority. This feature also allows to transition to new algorithms, such as post-quantum cryptography (PQC) algorithms.</t>

<t>The SUIT_Authentication structure <bcp14>MUST</bcp14> come before the suit-manifest element, regardless of canonical encoding of CBOR. The algorithms used in SUIT_Authentication are defined by the profiles declared in <xref target="I-D.ietf-suit-mti"/>.</t>

</section>
<section anchor="manifest-structure"><name>Manifest</name>

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
</list></t>

<t>The Text section, or any Command Sequence of the Update Procedure (Image Fetch, Image Installation and, System Validation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are <bcp14>RECOMMENDED</bcp14> to implement. In particular, the human-readable text <bcp14>SHOULD</bcp14> be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version"><name>suit-manifest-version</name>

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is <bcp14>REQUIRED</bcp14> to implement.</t>

</section>
<section anchor="manifest-seqnr"><name>suit-manifest-sequence-number</name>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. Each Recipient <bcp14>MUST</bcp14> reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer <bcp14>MAY</bcp14> use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is <bcp14>REQUIRED</bcp14> to implement.</t>

</section>
<section anchor="manifest-reference-uri"><name>suit-reference-uri</name>

<t>suit-reference-uri is a UTF-8 string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.
This document is only concerned with the transport of a UTF-8 encoded URI which is 
intended for machine readable uses, not human readable uses.</t>

</section>
<section anchor="manifest-digest-text"><name>suit-text</name>

<t>suit-text <bcp14>SHOULD</bcp14> be a severable element. suit-text is a map of language identifiers (identical to Tag38 of RFC9290, Appendix A) to language-specific text maps. Each language-specific text map is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>The SUIT_Text_Map is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
tag38-ltag = text .regexp "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"

SUIT_Text_Map = {
    + tag38-ltag => SUIT_Text_LMap
}
SUIT_Text_LMap = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}
]]></artwork></figure>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text <bcp14>MUST</bcp14> also be present in suit-common (<xref target="manifest-common"/>).</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section <bcp14>MAY</bcp14> be present. If present, each section <bcp14>MUST</bcp14> be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML-formatted document <xref target="YAML"/> that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition (see <xref target="uuid-identifiers"/>)</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition (see <xref target="uuid-identifiers"/>)</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
</texttable>

<t>suit-text is <bcp14>OPTIONAL</bcp14> to implement.</t>

</section>
<section anchor="manifest-common"><name>suit-common</name>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-components, and suit-shared-sequence. suit-common is <bcp14>REQUIRED</bcp14> to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is <bcp14>REQUIRED</bcp14> to implement.</t>

<t>suit-shared-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-shared-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-shared-sequence is <bcp14>RECOMMENDED</bcp14> to implement. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or command in suit-shared-sequence results in a smaller encoding.</t>

<section anchor="suit-component-identifier"><name>SUIT_Component_Identifier</name>

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h'00']. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path "/usr/bin/env" would encode to ['usr','bin','env'].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands"><name>SUIT_Command_Sequence</name>

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient <bcp14>MUST</bcp14> take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is <bcp14>OPTIONAL</bcp14> to implement because it is not relevant in all bootloaders.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is <bcp14>OPTIONAL</bcp14> to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation. suit-validate is <bcp14>REQUIRED</bcp14> to implement.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is <bcp14>OPTIONAL</bcp14> to implement.</t>
  <t>Invoke or Boot: suit-invoke is a SUIT_Command_Sequence to execute in order to invoke an image. suit-invoke typically contains a single instruction: the "invoke" directive, but may also contain an image condition. suit-invoke is <bcp14>OPTIONAL</bcp14> to implement because it not needed for restart-based invocation.</t>
</list></t>

<t>Goals 1,2,3 form the Update Procedure. Goals 3,4,5 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that <bcp14>MUST</bcp14> be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that <bcp14>MUST</bcp14> be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided. This index is a numeric index into the Component Identifier table defined at the beginning of the manifest.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy"><name>Reporting Policy</name>

<t>To facilitate construction of Reports that describe the success or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor <bcp14>MAY</bcp14> forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine's interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>The Reporting Engine consumes these information elements and decides whether to generate an entry in its report output and which information elements to include based on its internal policy decisions. The Reporting Engine uses the reporting policy provided to it by the SUIT Manifest Processor as a set of hints but <bcp14>MAY</bcp14> choose to ignore these hints and apply its own policy instead.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine <bcp14>MUST</bcp14> receive one set of information elements for each Component, in the order expressed in the Components list or the Component Index array.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which information elements it should aggregate into the Report.</t>

<t>When used in a Invocation Procedure, the output of the Reporting Engine <bcp14>MAY</bcp14> form the basis of an attestation report. When used in an Update Process, the report <bcp14>MAY</bcp14> form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters"><name>SUIT_Parameters</name>

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reuse of parameters between commands, thus reducing manifest size.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Content</c>
      <c>suit-parameter-content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c>Component Slot</c>
      <c>suit-parameter-component-slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Invoke Args</c>
      <c>suit-parameter-invoke-args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately.</t>

<section anchor="cbor-pen-uuid-namespace-identifier"><name>CBOR PEN UUID Namespace Identifier</name>

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR absolute OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 6F                # tag(111)
   45                # bytes(5)
# Absolute OID encoding of IANA Private Enterprise Number:
#    1.3. 6. 1. 4. 1
      2B 06 01 04 01 # X.690 Clause 8.19
]]></artwork></figure>

<t>Computing a version 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 47fbdabb-f2e4-55f0-bb39-3620c2f6df4e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers"><name>Constructing UUIDs</name>

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="I-D.ietf-uuidrev-rfc4122bis"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient <bcp14>MAY</bcp14> match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They <bcp14>MUST NOT</bcp14> be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module's firmware has a proprietary update mechanism and doesn't support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs <bcp14>MUST</bcp14> be created according to versions 3, 4, or 5 of <xref target="I-D.ietf-uuidrev-rfc4122bis"/>. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The <bcp14>RECOMMENDED</bcp14> method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>In this case, the vendor domain name is a UTF-8 encoded string. Since UUID version 5
applies a digest, internationalization considerations are not applied. The native 
UTF-8 domain name is used.</t>

<t>If the Vendor ID is a UUID, the <bcp14>RECOMMENDED</bcp14> method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the <bcp14>RECOMMENDED</bcp14> method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier"><name>suit-parameter-vendor-identifier</name>

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID <xref target="I-D.ietf-uuidrev-rfc4122bis"/></t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="RFC9090"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier"><name>suit-parameter-class-identifier</name>

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It <bcp14>MUST</bcp14> be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier"><name>suit-parameter-device-identifier</name>

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It <bcp14>MUST</bcp14> be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest"><name>suit-parameter-image-digest</name>

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size"><name>suit-parameter-image-size</name>

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-component-slot"><name>suit-parameter-component-slot</name>

<t>This parameter sets the slot index of a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its index into the component's storage area. This slot <bcp14>MUST</bcp14> be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-content"><name>suit-parameter-content</name>

<t>A block of raw data for use with <xref target="suit-directive-write"/>. It contains a byte string of data to be written to a specified component ID in the same way as a fetch or a copy.</t>

<t>If data is encoded this way, it should be small, e.g. 10's of bytes. Large payloads, e.g. 1000's of bytes, written via this method might prevent the manifest from being held in memory during validation. Typical applications include small configuration parameters.</t>

<t>The size of payload embedded in suit-parameter-content impacts the security requirement defined in <xref target="RFC9124"/>, Section 4.3.21 REQ.SEC.MFST.CONST: Manifest Kept Immutable between Check and Use. Actual limitations on payload size for suit-parameter-content depend on the application, in particular the available memory that satisfies REQ.SEC.MFST.CONST. If the availability of tamper resistant memory is less than the manifest size, then REQ.SEC.MFST.CONST cannot be satisfied.</t>

<t>If suit-parameter-content is instantiated in a severable command sequence, then this becomes functionally very similar to an integrated payload, which may be a better choice.</t>

</section>
<section anchor="suit-parameter-uri"><name>suit-parameter-uri</name>

<t>A UTF-8 encoded URI Reference <xref target="RFC3986"/> from which to fetch a resource. The encoding is the same as CBOR Tag 32, however the tag is omitted because it is implied by the context.
This document is only concerned with the transport of a UTF-8 encoded URI which is 
intended for machine readable uses, not human readable uses.</t>

</section>
<section anchor="suit-parameter-source-component"><name>suit-parameter-source-component</name>

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-invoke-args"><name>suit-parameter-invoke-args</name>

<t>This parameter contains an encoded set of arguments for suit-directive-invoke (<xref target="suit-directive-invoke"/>). The arguments <bcp14>MUST</bcp14> be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-fetch-arguments"><name>suit-parameter-fetch-arguments</name>

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order"><name>suit-parameter-strict-order</name>

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It <bcp14>MAY</bcp14> be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands <bcp14>MUST</bcp14> have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands <bcp14>MUST</bcp14> complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure"><name>suit-parameter-soft-failure</name>

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when the enclosing SUIT_Command_Sequence terminates and suit-parameter-soft-failure reverts to the value it had prior to the invocation of the SUIT_Command_Sequence. Nested SUIT_Command_Sequences do not inherit the enclosing sequence's suit-parameter-soft-failure. It <bcp14>MUST NOT</bcp14> be set outside of suit-directive-try-each or suit-directive-run-sequence, modifying suit-parameter-soft-failure outside of these circumstances causes an Abort.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True in every SUIT_Command_Sequence in the suit-directive-try-each argument. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort. When the enclosing SUIT_Command_Sequence terminates, suit-parameter-soft-failure reverts to the value it held before the SUIT_Command_Sequence was invoked.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom"><name>suit-parameter-custom</name>

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It <bcp14>MUST NOT</bcp14> be used in the shared sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

<t>suit-parameter-custom <bcp14>MAY</bcp14> be consumed by any command, in an application-specific way, however if a suit-parameter-custom is absent, then all standardised suit-commands <bcp14>MUST</bcp14> execute correctly. In this respect, suit-parameter-custom <bcp14>MUST</bcp14> be treated as a hint by any standardised suit-command that consumes it.</t>

</section>
</section>
<section anchor="suitcondition"><name>SUIT_Condition</name>

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Check Content</c>
      <c>suit-condition-check-content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c>Component Slot</c>
      <c>suit-condition-component-slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-command-custom</c>
      <c><xref target="SUIT_Command_Custom"/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition <bcp14>MUST</bcp14> report a result code on completion. If a condition reports failure, then the current sequence of commands <bcp14>MUST</bcp14> terminate. A subsequent command or command sequence <bcp14>MAY</bcp14> continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this <bcp14>MUST</bcp14> be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it <bcp14>MUST</bcp14> report a failure. If a Recipient encounters an unknown condition, it <bcp14>MUST</bcp14> report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions"><name>suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier</name>

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a UUID <xref target="I-D.ietf-uuidrev-rfc4122bis"/> that <bcp14>MUST</bcp14> have already been set as a parameter. The installing Recipient <bcp14>MUST</bcp14> match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component <bcp14>MAY</bcp14> match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are <bcp14>REQUIRED</bcp14> to implement. suit-condition-device-identifier is <bcp14>OPTIONAL</bcp14> to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers <bcp14>MUST</bcp14> be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match"><name>suit-condition-image-match</name>

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component's parameters list. If no digest is specified, the condition fails. suit-condition-image-match is <bcp14>REQUIRED</bcp14> to implement.</t>

</section>
<section anchor="suit-condition-check-content"><name>suit-condition-check-content</name>

<t>This directive compares the specified component identifier to the data indicated by suit-parameter-content. This functions similarly to suit-condition-image-match, however it does a direct, byte-by-byte comparison rather than a digest-based comparison. Because it is possible that an early stop to check-content could reveal information through timing, suit-condition-check-content <bcp14>MUST</bcp14> be constant time: no early exits.</t>

<t>The following pseudo-code described an example content checking algorithm:</t>

<figure><artwork><![CDATA[
// content & component must be same length
// returns 0 for match
int check_content(content, component, length) {
    int residual = 0;
    for (i = 0; i < length; i++) {
        residual |= content[i] ^ component[i];
    }
    return residual;
}
]]></artwork></figure>

</section>
<section anchor="suit-condition-component-slot"><name>suit-condition-component-slot</name>

<t>Verify that the slot index of the current component matches the slot index set in suit-parameter-component-slot (<xref target="suit-parameter-component-slot"/>). This condition allows a manifest to select between several images to match a target slot.</t>

</section>
<section anchor="suit-condition-abort"><name>suit-condition-abort</name>

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
</section>
<section anchor="suitdirective"><name>SUIT_Directive</name>
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Write</c>
      <c>suit-directive-write</c>
      <c><xref target="suit-directive-write"/></c>
      <c>Invoke</c>
      <c>suit-directive-invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>Custom Directive</c>
      <c>suit-command-custom</c>
      <c><xref target="SUIT_Command_Custom"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it <bcp14>MUST</bcp14> report a result code. If the Directive reports failure, then the current Command Sequence <bcp14>MUST</bcp14> be terminated.</t>

<section anchor="suit-directive-set-component-index"><name>suit-directive-set-component-index</name>

<t>Set Component Index defines the component to which successive directives and conditions will apply. The Set Component Index arguments are described in <xref target="index-true"/>.</t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value "True" is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-try-each"><name>suit-directive-try-each</name>

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order, until one succeeds or the list is exhausted. Use this command to implement a "try/catch-try/catch" sequence. Manifest processors <bcp14>MAY</bcp14> implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters"><name>suit-directive-override-parameters</name>

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch"><name>suit-directive-fetch</name>

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more payloads. suit-directive-fetch retrieves each component listed in component-index. If component-index is True, instead of an integer, then all current manifest components are fetched. If component-index is an array, then all listed components are fetched.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

<t>The size and digest of the payload to be fetched are typically set prior to the invokation of suit-directive-fetch. If both suit-parameter-image-digest and suit-parameter-image-size are set for the current component when suit-directive-fetch is invoked, the Manifest Processor <bcp14>MAY</bcp14> choose to optimize the fetch by:</t>

<t><list style="symbols">
  <t>Checking if the target component matches the digest supplied before fetching.</t>
  <t>Checking if another component matches the digest supplied before fetching.</t>
</list></t>

<t>The exact mechanisms of these optimizations are implementation defined.</t>

</section>
<section anchor="suit-directive-copy"><name>suit-directive-copy</name>

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

<t>The size and digest of the payload to be fetched are typically set prior to the invokation of suit-directive-copy. If both suit-parameter-image-digest and suit-parameter-image-size are set for the current component when suit-directive-copy is invoked, the Manifest Processor <bcp14>MAY</bcp14> choose to optimize the copy by:</t>

<t><list style="symbols">
  <t>Checking if the target component matches the digest supplied before copying.</t>
  <t>Checking if the source component matches the digest supplied before copying.</t>
</list></t>

<t>The first optimization avoids a copy operation when the data is the same. The second optimization avoids a copy of a corrupted image. The exact mechanisms of these optimizations are implementation defined.</t>

</section>
<section anchor="suit-directive-write"><name>suit-directive-write</name>

<t>This directive writes a small block of data, specified in <xref target="suit-parameter-content"/>, to a component.</t>

<t>Encoding Considerations: Careful consideration must be taken to determine whether it is more appropriate to use an integrated payload or to use <xref target="suit-parameter-content"/> for a particular application. While the encoding of suit-directive-write is smaller than an integrated payload, a large suit-parameter-content payload may prevent the manifest processor from holding the command sequence in memory while executing it.</t>

</section>
<section anchor="suit-directive-invoke"><name>suit-directive-invoke</name>

<t>suit-directive-invoke directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor <bcp14>MAY</bcp14> be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-invoke through suit-parameter-invoke-arguments (<xref target="suit-parameter-invoke-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor <bcp14>MAY</bcp14> resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-run-sequence"><name>suit-directive-run-sequence</name>

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr. This also allows a sequence of instructions to be iterated over, once for each current component index, when component-index = true or component-index = list. See <xref target="index-true"/>.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap"><name>suit-directive-swap</name>

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

</section>
</section>
<section anchor="SUIT_Command_Custom"><name>suit-command-custom</name>

<t>suit-command-custom describes any experimental, proprietary, or application specific condition or directive. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided, it should be encoded in a custom parameter (as described in <xref target="secparameters"/>). Any number of custom commands is permitted. SUIT_Command_Custom is <bcp14>OPTIONAL</bcp14> to implement.</t>

</section>
<section anchor="integrity-checks"><name>Integrity Check Values</name>

<t>When the Text section or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields"><name>Severable Elements</name>

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or "Severed" without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>At time of manifest creation, the Author <bcp14>MAY</bcp14> chose to make a manifest element severable by removing it from the manifest, encoding it in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that it can still be authenticated. Making an element severable changes the digest of the manifest, so the signature <bcp14>MUST</bcp14> be computed after manifest elements are made severable. Only Manifest Elements with corresponding elements in the SUIT_Envelope can be made severable (see <xref target="iana-envelope"/> for SUIT_Envelope elements). The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 <bcp14>SHOULD NOT</bcp14> be severable. Elements larger than (Digest Bits)/8 + 4 <bcp14>MAY</bcp14> be severable, while elements that are much larger than (Digest Bits)/8 + 4 <bcp14>SHOULD</bcp14> be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists"><name>Access Control Lists</name>

<t>SUIT Manifest Processors are <bcp14>RECOMMENDED</bcp14> to use one of the following models for managing permissions in the manifest.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest"><name>SUIT Digest Container</name>

<t>The SUIT digest is a CBOR array containing two elements: an algorithm identifier and a bstr containing the bytes of the digest. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The values of the algorithm identifier are found in the IANA "COSE Algorithms" registry <xref target="COSE_Alg"/>, which was created by <xref target="RFC9054"/>. SHA-256 (-16) <bcp14>MUST</bcp14> be implemented by all Manifest Processors.</t>

<t>Any other algorithm defined in the IANA "COSE Algorithms" registry, such as SHA-512 (-44), <bcp14>MAY</bcp14> be implemented in a Manifest Processor.</t>

</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 107 (suggested) in the "CBOR Tags" registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 1070 (suggested) in the "CBOR Tags" registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the "Media Types" registry, see below.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to create a new category for Software Update for the Internet of Things (SUIT)
and a page within this category for SUIT manifests.</t>

<t>IANA is also requested to create several registries defined in the subsections below.</t>

<t>For each registry, values 0-255 are Standards Action and 256 or greater are Specification Required. Negative values -255 to 0 are Standards Action, and -256 and lower are Private Use.</t>

<t>New entries to those registries need to provide a label, a name and a reference to a specification that describes the functionality. More guidance on the expert review can be found below.</t>

<section anchor="iana-envelope"><name>SUIT Envelope Elements</name>

<t>IANA is requested to create a new registry for SUIT envelope elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Reserved</c>
      <c>Unset Detection</c>
      <c>1</c>
      <c>Reserved</c>
      <c>Future Delegation</c>
      <c>2</c>
      <c>Authentication Wrapper</c>
      <c><xref target="authentication-info"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Manifest</c>
      <c><xref target="manifest-structure"/> of [TBD: this document]</c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>17</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-manifest-elements"><name>SUIT Manifest Elements</name>

<t>IANA is requested to create a new registry for SUIT manifest elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Reserved</c>
      <c>Unset Detection</c>
      <c>1</c>
      <c>Encoding Version</c>
      <c><xref target="manifest-version"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Sequence Number</c>
      <c><xref target="manifest-seqnr"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Common Data</c>
      <c><xref target="manifest-common"/> of [TBD: this document]</c>
      <c>4</c>
      <c>Reference URI</c>
      <c><xref target="manifest-reference-uri"/> of [TBD: this document]</c>
      <c>7</c>
      <c>Image Validation</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>8</c>
      <c>Image Loading</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>9</c>
      <c>Image Invocation</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>16</c>
      <c>Payload Fetch</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>17</c>
      <c>Payload Installation</c>
      <c><xref target="manifest-commands"/> of [TBD: this document]</c>
      <c>23</c>
      <c>Text Description</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-common-elements"><name>SUIT Common Elements</name>

<t>IANA is requested to create a new registry for SUIT common elements.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Reserved</c>
      <c>Unset Detection</c>
      <c>2</c>
      <c>Component Identifiers</c>
      <c><xref target="manifest-common"/> of [TBD: this document]</c>
      <c>4</c>
      <c>Common Command Sequence</c>
      <c><xref target="manifest-common"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<t>IANA is requested to create a new registry for SUIT commands.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Reserved</c>
      <c>Unset Detection</c>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/> of [TBD: this document]</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/> of [TBD: this document]</c>
      <c>6</c>
      <c>Check Content</c>
      <c><xref target="suit-condition-check-content"/> of [TBD: this document]</c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/> of [TBD: this document]</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/> of [TBD: this document]</c>
      <c>18</c>
      <c>Write Content</c>
      <c><xref target="suit-directive-write"/> of [TBD: this document]</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/> of [TBD: this document]</c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/> of [TBD: this document]</c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/> of [TBD: this document]</c>
      <c>23</c>
      <c>Invoke</c>
      <c><xref target="suit-directive-invoke"/> of [TBD: this document]</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/> of [TBD: this document]</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/> of [TBD: this document]</c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/> of [TBD: this document]</c>
      <c>&lt; -255</c>
      <c>Custom Command</c>
      <c><xref target="SUIT_Command_Custom"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-parameters"><name>SUIT Parameters</name>

<t>IANA is requested to create a new registry for SUIT parameters.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Reserved</c>
      <c>Unset Detection</c>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/> of [TBD: this document]</c>
      <c>5</c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/> of [TBD: this document]</c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/> of [TBD: this document]</c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/> of [TBD: this document]</c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/> of [TBD: this document]</c>
      <c>18</c>
      <c>Content</c>
      <c><xref target="suit-parameter-content"/> of [TBD: this document]</c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/> of [TBD: this document]</c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/> of [TBD: this document]</c>
      <c>23</c>
      <c>Invoke Args</c>
      <c><xref target="suit-parameter-invoke-args"/> of [TBD: this document]</c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/> of [TBD: this document]</c>
      <c>&lt; -255</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-text-values"><name>SUIT Text Values</name>

<t>IANA is requested to create a new registry for SUIT text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Reserved</c>
      <c>Unset Detection</c>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>&lt; -255</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="suit-component-text-values"><name> SUIT Component Text Values</name>

<t>IANA is requested to create a new registry for SUIT component text values.</t>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>0</c>
      <c>Reserved</c>
      <c>Unset Detection</c>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
      <c>&lt; -255</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/> of [TBD: this document]</c>
</texttable>

</section>
<section anchor="expert-review-instructions"><name>Expert Review Instructions</name>

<t>The IANA registries established in this document allow values to be added
based on expert review. This section gives some general guidelines for
what the experts should be looking for, but they are being designated
as experts for a reason, so they should be given substantial
latitude.</t>

<t>Expert reviewers should take into consideration the following points:</t>

<t><list style="symbols">
  <t>Point squatting should be discouraged.  Reviewers are encouraged
   to get sufficient information for registration requests to ensure
   that the usage is not going to duplicate one that is already
   registered, and that the point is likely to be used in
   deployments.  The zones tagged as private use
   are intended for testing purposes and closed environments;
   code points in other ranges should not be assigned for testing.</t>
  <t>Specifications are required for the standards track range of point
   assignment.  Specifications should exist for  all other ranges,
   but early assignment before a specification is
   available is considered to be permissible.
   When specifications are not provided, the description provided
   needs to have sufficient information to identify what the point is
   being used for.</t>
  <t>Experts should take into account the expected usage of fields when
   approving point assignment.  The fact that there is a range for
   standards track documents does not mean that a standards track
   document cannot have points assigned outside of that range.  The
   length of the encoded value should be weighed against how many
   code points of that length are left, the size of device it will be
   used on, and the number of code points left that encode to that
   size.</t>
</list></t>

</section>
<section anchor="media-type-registration"><name>Media Type Registration</name>

<t>This section registers the 'application/suit-envelope+cose' media type in the
"Media Types" registry.  This media type are used to indicate that
the content is a SUIT envelope.</t>

<figure><artwork><![CDATA[
      Type name: application

      Subtype name: suit-envelope+cose

      Required parameters: N/A

      Optional parameters: N/A

      Encoding considerations: binary

      Security considerations: See the Security Considerations section
      of [[This RFC]].

      Interoperability considerations: N/A

      Published specification: [[This RFC]]

      Applications that use this media type: Primarily used for
        Firmware and software updates although the content may
        also contain configuration data and other information
        related to software and firmware.

      Fragment identifier considerations: N/A

      Additional information:

      *  Deprecated alias names for this type: N/A

      *  Magic number(s): N/A

      *  File extension(s): cbor, suit

      *  Macintosh file type code(s): N/A

      Person & email address to contact for further information:
      iesg@ietf.org

      Intended usage: COMMON

      Restrictions on usage: N/A

      Author: Brendan Moran, <brendan.moran.ietf@gmail.com>

      Change Controller: IESG

      Provisional registration?  No
]]></artwork></figure>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

<t>The security requirements outlined in <xref target="RFC9124"/> are addressed by this draft and its extensions.
The specific mapping of requirements and information elements in <xref target="RFC9124"/> to manifest data structures is
outlined in the table below:</t>

<texttable>
      <ttcol align='left'>Security Requirement</ttcol>
      <ttcol align='left'>Information Element</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>REQ.SEC.SEQUENCE</c>
      <c>Monotonic Sequence Number</c>
      <c><xref target="manifest-seqnr"/></c>
      <c>REQ.SEC.COMPATIBLE</c>
      <c>Vendor ID Condition, Class ID Condition</c>
      <c><xref target="identifier-conditions"/></c>
      <c>REQ.SEC.EXP</c>
      <c>Expiration Time</c>
      <c><xref target="I-D.ietf-suit-update-management"/></c>
      <c>REQ.SEC.AUTHENTIC</c>
      <c>Signature, Payload Digests</c>
      <c><xref target="authentication-info"/>, <xref target="suit-condition-image-match"/></c>
      <c>REQ.SEC.AUTH.IMG_TYPE</c>
      <c>Payload Format</c>
      <c><xref target="I-D.ietf-suit-update-management"/></c>
      <c>REQ.SEC.AUTH.IMG_LOC</c>
      <c>Storage Location</c>
      <c><xref target="suit-component-identifier"/></c>
      <c>REQ.SEC.AUTH.REMOTE_LOC</c>
      <c>Payload Indicator</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQ.SEC.AUTH.EXEC</c>
      <c>Payload Digests, Size</c>
      <c><xref target="suit-parameter-image-digest"/>, <xref target="suit-parameter-image-size"/></c>
      <c>REQ.SEC.AUTH.PRECURSOR</c>
      <c>Precursor Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQ.SEC.AUTH.COMPATIBILITY</c>
      <c>Authenticated Vendor and Class IDs</c>
      <c><xref target="suit-parameter-vendor-identifier"/>, <xref target="suit-parameter-class-identifier"/></c>
      <c>REQ.SEC.RIGHTS</c>
      <c>Signature</c>
      <c><xref target="authentication-info"/>, <xref target="access-control-lists"/></c>
      <c>REQ.SEC.IMG.CONFIDENTIALITY</c>
      <c>Encryption Wrapper</c>
      <c><xref target="I-D.ietf-suit-firmware-encryption"/></c>
      <c>REQ.SEC.ACCESS_CONTROL: Access Control</c>
      <c>None</c>
      <c><xref target="access-control-lists"/></c>
      <c>REQ.SEC.MFST.CONFIDENTIALITY</c>
      <c>Manifest Encryption Wrapper / Transport Security</c>
      <c><xref target="I-D.ietf-suit-firmware-encryption"/></c>
      <c>REQ.SEC.IMG.COMPLETE_DIGEST</c>
      <c>Payload Digests</c>
      <c>Implementation Consideration</c>
      <c>REQ.SEC.REPORTING</c>
      <c>None</c>
      <c><xref target="I-D.ietf-suit-report"/>, <xref target="RFC9334"/></c>
      <c>REQ.SEC.KEY.PROTECTION</c>
      <c>None</c>
      <c>Implementation Consideration</c>
      <c>REQ.SEC.KEY.ROTATION</c>
      <c>None</c>
      <c><xref target="I-D.tschofenig-cose-cwt-chain"/>, Implementation Consideration</c>
      <c>REQ.SEC.MFST.CHECK</c>
      <c>None</c>
      <c>Deployment Consideration</c>
      <c>REQ.SEC.MFST.TRUSTED</c>
      <c>None</c>
      <c>Deployment Consideration</c>
      <c>REQ.SEC.MFST.CONST</c>
      <c>None</c>
      <c>Implementation Consideration</c>
      <c>REQ.USE.MFST.PRE_CHECK</c>
      <c>Additional Installation Instructions</c>
      <c><xref target="I-D.ietf-suit-update-management"/></c>
      <c>REQ.USE.MFST.TEXT</c>
      <c>Manifest Text Information</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>REQ.USE.MFST.OVERRIDE_REMOTE</c>
      <c>Aliases</c>
      <c><xref target="RFC3986"/> Relative URIs, <xref target="I-D.ietf-suit-trust-domains"/></c>
      <c>REQ.USE.MFST.COMPONENT</c>
      <c>Dependencies, StorageIdentifier, ComponentIdentifier</c>
      <c><xref target="suit-component-identifier">SUIT_Component_Identifier</xref>, <xref target="I-D.ietf-suit-trust-domains"/></c>
      <c>REQ.USE.MFST.MULTI_AUTH</c>
      <c>Signature</c>
      <c><xref target="authentication-info"/></c>
      <c>REQ.USE.IMG.FORMAT</c>
      <c>Payload Format</c>
      <c><xref target="I-D.ietf-suit-update-management"/></c>
      <c>REQ.USE.IMG.NESTED</c>
      <c>Processing Steps</c>
      <c><xref target="I-D.ietf-suit-firmware-encryption"/> (Encryption Wrapper), <xref target="I-D.ietf-suit-update-management"/> (Payload Format)</c>
      <c>REQ.USE.IMG.VERSIONS</c>
      <c>Required Image Version List</c>
      <c><xref target="I-D.ietf-suit-update-management"/></c>
      <c>REQ.USE.IMG.SELECT</c>
      <c>XIP Address</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c>REQ.USE.EXEC</c>
      <c>Runtime Metadata</c>
      <c><xref target="manifest-commands"/> (suit-invoke)</c>
      <c>REQ.USE.LOAD</c>
      <c>Load-Time Metadata</c>
      <c><xref target="manifest-commands"/> (suit-load)</c>
      <c>REQ.USE.PAYLOAD</c>
      <c>Payload</c>
      <c><xref target="template-integrated-payload"/></c>
      <c>REQ.USE.PARSE</c>
      <c>Simple Parsing</c>
      <c><xref target="command-behavior"/></c>
      <c>REQ.USE.DELEGATION</c>
      <c>Delegation Chain</c>
      <c><xref target="I-D.tschofenig-cose-cwt-chain"/></c>
</texttable>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Milosch Meriac"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Geraint Luff"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Dan Ros"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="John-Paul Stanford"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Hugo Vincent"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Carsten Bormann"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Frank Audun Kvamtrø"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Krzysztof Chruściński"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Andrzej Puzdrowski"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Michael Richardson"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="David Brown"/></t>
      </dd>
    </dl>
  </t>
  <t>    <dl>
      <dt> </dt>
      <dd>
        <t><contact fullname="Emmanuel Baccelli"/></t>
      </dd>
    </dl>
  </t>
</list></t>

<t>We would like to thank our responsible area director, Roman Danyliw, for his detailed review.
Finally, we would like to thank our SUIT working group chairs (Dave Thaler, David Waltermire, Russ Housley)
for their feedback and support.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>




<reference anchor='I-D.ietf-uuidrev-rfc4122bis'>
   <front>
      <title>Universally Unique IDentifiers (UUID)</title>
      <author fullname='Kyzer R. Davis' initials='K. R.' surname='Davis'>
         <organization>Cisco Systems</organization>
      </author>
      <author fullname='Brad Peabody' initials='B.' surname='Peabody'>
         <organization>Uncloud</organization>
      </author>
      <author fullname='P. Leach' initials='P.' surname='Leach'>
         <organization>University of Washington</organization>
      </author>
      <date day='6' month='November' year='2023'/>
      <abstract>
	 <t>   This specification defines the UUIDs (Universally Unique IDentifiers)
   and the UUID Uniform Resource Name (URN) namespace.  UUIDs are also
   known as GUIDs (Globally Unique IDentifiers).  A UUID is 128 bits
   long and is intended to guarantee uniqueness across space and time.
   UUIDs were originally used in the Apollo Network Computing System and
   later in the Open Software Foundation&#x27;s (OSF) Distributed Computing
   Environment (DCE), and then in Microsoft Windows platforms.

   This specification is derived from the DCE specification with the
   kind permission of the OSF (now known as The Open Group).
   Information from earlier versions of the DCE specification have been
   incorporated into this document.  This document obsoletes RFC4122.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-uuidrev-rfc4122bis-14'/>
   
</reference>

<reference anchor='RFC9052'>
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname='J. Schaad' initials='J.' surname='Schaad'/>
    <date month='August' year='2022'/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='96'/>
  <seriesInfo name='RFC' value='9052'/>
  <seriesInfo name='DOI' value='10.17487/RFC9052'/>
</reference>

<reference anchor='RFC3986'>
  <front>
    <title>Uniform Resource Identifier (URI): Generic Syntax</title>
    <author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'/>
    <author fullname='R. Fielding' initials='R.' surname='Fielding'/>
    <author fullname='L. Masinter' initials='L.' surname='Masinter'/>
    <date month='January' year='2005'/>
    <abstract>
      <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='66'/>
  <seriesInfo name='RFC' value='3986'/>
  <seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>

<reference anchor='RFC8949'>
  <front>
    <title>Concise Binary Object Representation (CBOR)</title>
    <author fullname='C. Bormann' initials='C.' surname='Bormann'/>
    <author fullname='P. Hoffman' initials='P.' surname='Hoffman'/>
    <date month='December' year='2020'/>
    <abstract>
      <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
      <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='94'/>
  <seriesInfo name='RFC' value='8949'/>
  <seriesInfo name='DOI' value='10.17487/RFC8949'/>
</reference>

<reference anchor='RFC9019'>
  <front>
    <title>A Firmware Update Architecture for Internet of Things</title>
    <author fullname='B. Moran' initials='B.' surname='Moran'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='D. Brown' initials='D.' surname='Brown'/>
    <author fullname='M. Meriac' initials='M.' surname='Meriac'/>
    <date month='April' year='2021'/>
    <abstract>
      <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
      <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9019'/>
  <seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>

<reference anchor='RFC9124'>
  <front>
    <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
    <author fullname='B. Moran' initials='B.' surname='Moran'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='H. Birkholz' initials='H.' surname='Birkholz'/>
    <date month='January' year='2022'/>
    <abstract>
      <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t>
      <t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9124'/>
  <seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>


<reference anchor='I-D.ietf-suit-mti'>
   <front>
      <title>Mandatory-to-Implement Algorithms for Authors and Recipients of Software Update for the Internet of Things manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Øyvind Rønningstad' initials='O.' surname='Rønningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <author fullname='Akira Tsukamoto' initials='A.' surname='Tsukamoto'>
         <organization>ALAXALA Networks Corp.</organization>
      </author>
      <date day='12' month='February' year='2024'/>
      <abstract>
	 <t>   This document specifies algorithm profiles for SUIT manifest parsers
   and authors to ensure better interoperability.  These profiles apply
   specifically to a constrained node software update use case.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-mti-05'/>
   
</reference>

<reference anchor='RFC9090'>
  <front>
    <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
    <author fullname='C. Bormann' initials='C.' surname='Bormann'/>
    <date month='July' year='2021'/>
    <abstract>
      <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
      <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9090'/>
  <seriesInfo name='DOI' value='10.17487/RFC9090'/>
</reference>

<reference anchor='RFC9054'>
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Hash Algorithms</title>
    <author fullname='J. Schaad' initials='J.' surname='Schaad'/>
    <date month='August' year='2022'/>
    <abstract>
      <t>The CBOR Object Signing and Encryption (COSE) syntax (see RFC 9052) does not define any direct methods for using hash algorithms. There are, however, circumstances where hash algorithms are used, such as indirect signatures, where the hash of one or more contents are signed, and identification of an X.509 certificate or other object by the use of a fingerprint. This document defines hash algorithms that are identified by COSE algorithm identifiers.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9054'/>
  <seriesInfo name='DOI' value='10.17487/RFC9054'/>
</reference>

<reference anchor='RFC2119'>
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname='S. Bradner' initials='S.' surname='Bradner'/>
    <date month='March' year='1997'/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='2119'/>
  <seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>

<reference anchor='RFC8174'>
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname='B. Leiba' initials='B.' surname='Leiba'/>
    <date month='May' year='2017'/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='8174'/>
  <seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>



<reference anchor='RFC9397'>
  <front>
    <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
    <author fullname='M. Pei' initials='M.' surname='Pei'/>
    <author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'/>
    <author fullname='D. Thaler' initials='D.' surname='Thaler'/>
    <author fullname='D. Wheeler' initials='D.' surname='Wheeler'/>
    <date month='July' year='2023'/>
    <abstract>
      <t>A Trusted Execution Environment (TEE) is an environment that enforces the following: any code within the environment cannot be tampered with, and any data used by such code cannot be read or tampered with by any code outside the environment. This architecture document discusses the motivation for designing and standardizing a protocol for managing the lifecycle of Trusted Applications running inside such a TEE.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9397'/>
  <seriesInfo name='DOI' value='10.17487/RFC9397'/>
</reference>

<reference anchor='RFC9334'>
  <front>
    <title>Remote ATtestation procedureS (RATS) Architecture</title>
    <author fullname='H. Birkholz' initials='H.' surname='Birkholz'/>
    <author fullname='D. Thaler' initials='D.' surname='Thaler'/>
    <author fullname='M. Richardson' initials='M.' surname='Richardson'/>
    <author fullname='N. Smith' initials='N.' surname='Smith'/>
    <author fullname='W. Pan' initials='W.' surname='Pan'/>
    <date month='January' year='2023'/>
    <abstract>
      <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9334'/>
  <seriesInfo name='DOI' value='10.17487/RFC9334'/>
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='David Brown' initials='D.' surname='Brown'>
         <organization>Linaro</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='8' month='July' year='2024'/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware,
   machine learning models, and personalization data by utilizing the
   IETF SUIT manifest.  Key agreement is provided by ephemeral-static
   (ES) Diffie-Hellman (DH) and AES Key Wrap (AES-KW).  ES-DH uses
   public key cryptography while AES-KW uses a pre-shared key.
   Encryption of the plaintext is accomplished with conventional
   symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-20'/>
   
</reference>


<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='4' month='March' year='2024'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-06'/>
   
</reference>


<reference anchor='I-D.ietf-suit-trust-domains'>
   <front>
      <title>SUIT Manifest Extensions for Multiple Trust Domains</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='6' month='July' year='2024'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT Manifest format
   (as defined in [I-D.ietf-suit-manifest]) for use in deployments with
   multiple trust domains.  A device has more than one trust domain when
   it enables delegation of different rights to mutually distrusting
   entities for use for different purposes or Components in the context
   of firmware or software update.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-trust-domains-07'/>
   
</reference>


<reference anchor='I-D.ietf-suit-report'>
   <front>
      <title>Secure Reporting of Update Status</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <date day='4' month='March' year='2024'/>
      <abstract>
	 <t>   The Software Update for the Internet of Things (SUIT) manifest
   provides a way for many different update and boot workflows to be
   described by a common format.  However, this does not provide a
   feedback mechanism for developers in the event that an update or boot
   fails.

   This specification describes a lightweight feedback mechanism that
   allows a developer in possession of a manifest to reconstruct the
   decisions made and actions performed by a manifest processor.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-report-08'/>
   
</reference>


<reference anchor='I-D.tschofenig-cose-cwt-chain'>
   <front>
      <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing Chains of CBOR Web Tokens (CWTs)</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='8' month='July' year='2024'/>
      <abstract>
	 <t>   The CBOR Object Signing and Encryption (COSE) message structure uses
   references to keys and defines header parameters to carry chains of
   X.509 certificates.

   This specification extends this functionality to CBOR Web Tokens
   (CWTs).

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-tschofenig-cose-cwt-chain-01'/>
   
</reference>

<reference anchor='RFC7228'>
  <front>
    <title>Terminology for Constrained-Node Networks</title>
    <author fullname='C. Bormann' initials='C.' surname='Bormann'/>
    <author fullname='M. Ersue' initials='M.' surname='Ersue'/>
    <author fullname='A. Keranen' initials='A.' surname='Keranen'/>
    <date month='May' year='2014'/>
    <abstract>
      <t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks. This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='7228'/>
  <seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>


<reference anchor="YAML" target="https://yaml.org/spec/1.2.2/">
  <front>
    <title>YAML Ain’t Markup Language (YAML™) version 1.2</title>
    <author >
      <organization></organization>
    </author>
    <date year="2021"/>
  </front>
</reference>
<reference anchor="COSE_Alg" target="https://www.iana.org/assignments/cose/cose.xhtml#algorithms">
  <front>
    <title>COSE Algorithms</title>
    <author >
      <organization></organization>
    </author>
    <date year="2023"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl"><name>Full CDDL</name>
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message <bcp14>MUST</bcp14> adhere to the following CDDL data definition.</t>

<t>To be valid, the following CDDL <bcp14>MUST</bcp14> have the COSE CDDL appended to it. The COSE CDDL can be obtained by following the directions in <xref section="1.4" sectionFormat="comma" target="RFC9052"/>.</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * $$SUIT_Envelope_Extensions,
}

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-cose-hash-algs,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
suit-integrated-payload-key = tstr

SUIT_Manifest_Tagged = #6.1070(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Unseverable_Members,
    SUIT_Severable_Members_Choice,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-invoke => bstr .cbor SUIT_Command_Sequence,
  * $$unseverable-manifest-member-extensions,
)

SUIT_Severable_Members_Choice = (
  ? suit-payload-fetch => SUIT_Digest / 
      bstr .cbor SUIT_Command_Sequence,
  ? suit-install => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
  ? suit-text => SUIT_Digest / bstr .cbor SUIT_Text_Map,
  * $$severable-manifest-members-choice-extensions
)

SUIT_Common = {
    ? suit-components             => SUIT_Components,
    ? suit-shared-sequence        => bstr .cbor SUIT_Shared_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Components           = [ + SUIT_Component_Identifier ]

;REQUIRED to implement:
suit-cose-hash-algs /= cose-alg-sha-256

;OPTIONAL to implement:
suit-cose-hash-algs /= cose-alg-shake128
suit-cose-hash-algs /= cose-alg-sha-384
suit-cose-hash-algs /= cose-alg-sha-512
suit-cose-hash-algs /= cose-alg-shake256

SUIT_Component_Identifier =  [* bstr]

SUIT_Shared_Sequence = [
    + ( SUIT_Condition // SUIT_Shared_Commands )
]

SUIT_Shared_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Shared_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Shared_Sequence)
SUIT_Shared_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument_Shared)
SUIT_Shared_Commands //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})

IndexArg /= uint
IndexArg /= true
IndexArg /= [+uint]


SUIT_Directive_Try_Each_Argument_Shared = [
    2* bstr .cbor SUIT_Shared_Sequence,
    ?nil
]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-slot,    SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-check-content,     SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-write,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-override-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-invoke,            SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    2* bstr .cbor SUIT_Command_Sequence,
    ?nil
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

$$SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))

cbor-pen = #6.112(bstr)

$$SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
$$SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
$$SUIT_Parameters //= (suit-parameter-image-size => uint)
$$SUIT_Parameters //= (suit-parameter-component-slot => uint)

$$SUIT_Parameters //= (suit-parameter-uri => tstr)
$$SUIT_Parameters //= (suit-parameter-source-component => uint)
$$SUIT_Parameters //= (suit-parameter-invoke-args => bstr)

$$SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)

$$SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

$$SUIT_Parameters //= (suit-parameter-content => bstr)
$$SUIT_Parameters //= (suit-parameter-strict-order => bool)
$$SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

tag38-ltag = text .regexp "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"
SUIT_Text_Map = {
    + tag38-ltag => SUIT_Text_LMap
}
SUIT_Text_LMap = {
    SUIT_Text_Keys,
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    }
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-authentication-wrapper = 2
suit-manifest = 3

;REQUIRED to implement:
cose-alg-sha-256 = -16

;OPTIONAL to implement:
cose-alg-shake128 = -18
cose-alg-sha-384 = -43
cose-alg-sha-512 = -44
cose-alg-shake256 = -45

;Unseverable, recipient-necessary
suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-validate = 7
suit-load = 8
suit-invoke = 9
;Severable, recipient-necessary
suit-payload-fetch = 16
suit-install = 17
;Severable, recipient-unnecessary
suit-text = 23

suit-components = 2
suit-shared-sequence = 4

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-component-slot    = 5
suit-condition-check-content     = 6

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24

suit-directive-set-component-index      = 12
suit-directive-try-each                 = 15
suit-directive-write                    = 18
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-invoke                   = 23

suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-component-slot    = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14
suit-parameter-content           = 18

suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-invoke-args       = 23

suit-parameter-device-identifier = 24

suit-parameter-custom = nint

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
]]></sourcecode></figure>

</section>
<section anchor="examples"><name>Examples</name>

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-slot</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-invoke</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot"><name>Example 0: Secure Boot</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'6658ea560262696dd1f13b782239a064da7c6c5cbaf52fded428a6fc83c7e5af'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'56acf3c133338f558bbbac1e73a62bffac
2a0067d0f7a2e860e20b9119a61d964af04fb56c2c7618d3d74558c14f5daf7cafa877
1b34ec42160f5c94250a57eb'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:0,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-run / 23,2
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  161</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af035871a50101020003585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f0943821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  237</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f58206658ea560262696dd1f13b782239a064da
7c6c5cbaf52fded428a6fc83c7e5af584ad28443a10126a0f6584056acf3
c133338f558bbbac1e73a62bffac2a0067d0f7a2e860e20b9119a61d964a
f04fb56c2c7618d3d74558c14f5daf7cafa8771b34ec42160f5c94250a57
eb035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f0943821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload"><name>Example 1: Simultaneous Download and Installation of Payload</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'ef14b7091e8adae8aa3bb6fca1d64fb37e19dcf8b35714cfdddc5968c80ff50e'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'9c44e07766a26fd33d41ded913363c0ec7
465c06c30be70df32a73a4dea1bbb353d880d9d1813f7b6f0c6987dc4b289838468477
9c17ca9062085487254cf203'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:1,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  196</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820ef14b7091e8adae8aa3bb6fca1d64fb37e
19dcf8b35714cfdddc5968c80ff50e035894a50101020103585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f074382030f1158258614a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820ef14b7091e8adae8aa3bb6fca1d64fb37e
19dcf8b35714cfdddc5968c80ff50e584ad28443a10126a0f658409c44e0
7766a26fd33d41ded913363c0ec7465c06c30be70df32a73a4dea1bbb353
d880d9d1813f7b6f0c6987dc4b2898384684779c17ca9062085487254cf2
03035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f074382030f1158258614a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502
030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields"><name>Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'56c894f743ca34ff0ae76271f964dcb8c139edb4a8dc64b01444504620be28a8'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'd6fc4cd4119a261c9e7f782226a235aa06
960781a537064131238203e9fcde17f9a04e09f6ace03ef861971ef3d4b519558cdd96
6a6303e7e82783d6b2a99cf2'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:2,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / reference-uri / 4:'https://git.io/JJYoj',
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-run / 23,2
            ] >>,
            / install / 17:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'cfa90c5c58595e7f5119a72f803fd0370b3e6abbec6315cd38f63135281bc498'
            ],
            / text / 23:[
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'302196d452bce5e8bfeaf71e395645ede6d365e63507a081379721eeecf00007'
            ],
        } >>,
    })
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  257</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f582056c894f743ca34ff0ae76271f964dcb8c1
39edb4a8dc64b01444504620be28a80358d1a80101020203585fa2028181
41000458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492
af1425695e48bf429b2d51f2ab45035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f047468747470733a2f2f6769742e696f2f4a4a596f6a074382030f0943
82170211822f5820cfa90c5c58595e7f5119a72f803fd0370b3e6abbec63
15cd38f63135281bc49817822f5820302196d452bce5e8bfeaf71e395645
ede6d365e63507a081379721eeecf00007
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  333</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f582056c894f743ca34ff0ae76271f964dcb8c1
39edb4a8dc64b01444504620be28a8584ad28443a10126a0f65840d6fc4c
d4119a261c9e7f782226a235aa06960781a537064131238203e9fcde17f9
a04e09f6ace03ef861971ef3d4b519558cdd966a6303e7e82783d6b2a99c
f20358d1a80101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f047468747470733a2f2f676974
2e696f2f4a4a596f6a074382030f094382170211822f5820cfa90c5c5859
5e7f5119a72f803fd0370b3e6abbec6315cd38f63135281bc49817822f58
20302196d452bce5e8bfeaf71e395645ede6d365e63507a081379721eeec
f00007
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object and Severable Elements:  923</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba4025873825824822f582056c894f743ca34ff0ae76271f964dcb8c1
39edb4a8dc64b01444504620be28a8584ad28443a10126a0f65840d6fc4c
d4119a261c9e7f782226a235aa06960781a537064131238203e9fcde17f9
a04e09f6ace03ef861971ef3d4b519558cdd966a6303e7e82783d6b2a99c
f20358d1a80101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
035824822f582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f047468747470733a2f2f676974
2e696f2f4a4a596f6a074382030f094382170211822f5820cfa90c5c5859
5e7f5119a72f803fd0370b3e6abbec6315cd38f63135281bc49817822f58
20302196d452bce5e8bfeaf71e395645ede6d365e63507a081379721eeec
f0000711583c8614a1157832687474703a2f2f6578616d706c652e636f6d
2f766572792f6c6f6e672f706174682f746f2f66696c652f66696c652e62
696e1502030f1759020ba165656e2d5553a20179019d2323204578616d70
6c6520323a2053696d756c74616e656f757320446f776e6c6f61642c2049
6e7374616c6c6174696f6e2c2053656375726520426f6f742c2053657665
726564204669656c64730a0a2020202054686973206578616d706c652063
6f766572732074686520666f6c6c6f77696e672074656d706c617465733a
0a202020200a202020202a20436f6d7061746962696c6974792043686563
6b20287b7b74656d706c6174652d636f6d7061746962696c6974792d6368
65636b7d7d290a202020202a2053656375726520426f6f7420287b7b7465
6d706c6174652d7365637572652d626f6f747d7d290a202020202a204669
726d7761726520446f776e6c6f616420287b7b6669726d776172652d646f
776e6c6f61642d74656d706c6174657d7d290a202020200a202020205468
6973206578616d706c6520616c736f2064656d6f6e737472617465732073
6576657261626c6520656c656d656e747320287b7b6f76722d7365766572
61626c657d7d292c20616e64207465787420287b7b6d616e69666573742d
6469676573742d746578747d7d292e814100a2036761726d2e636f6d0578
525468697320636f6d706f6e656e7420697320612064656d6f6e73747261
74696f6e2e205468652064696765737420697320612073616d706c652070
61747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images"><name>Example 3: A/B images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'b3e6a52776bf3ed218feba031c609c98260e1a52fc1f019683edb6d1c5c4a379'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'a72d9dabc04af139a0a5b3ef775234b9ed
1c2390e03ffa1454458b2394cca16aced37039bbf84ea898a54a242d0d04883f22135a
9b98efe042015041f0142d4e'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:3,
            / common / 3:<< {
                / components / 2:[
                    [h'00']
                ],
                / shared-sequence / 4:<< [
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    } ,
                    / directive-try-each / 15,[
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:0,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                                ] >>,
                                / image-size / 14:34768,
                            }
                        ] >> ,
                        << [
                            / directive-override-parameters / 20,{
                                / slot / 5:1,
                            } ,
                            / condition-component-slot / 5,5 ,
                            / directive-override-parameters / 20,{
                                / image-digest / 3:<< [
                                    / algorithm-id / -16 / "sha256" /,
                                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                                ] >>,
                                / image-size / 14:76834,
                            }
                        ] >>
                    ] ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-try-each / 15,[
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:0,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-override-parameters / 20,{
                            / uri / 21:'http://example.com/file1.bin',
                        }
                    ] >> ,
                    << [
                        / directive-override-parameters / 20,{
                            / slot / 5:1,
                        } ,
                        / condition-component-slot / 5,5 ,
                        / directive-override-parameters / 20,{
                            / uri / 21:'http://example.com/file2.bin',
                        }
                    ] >>
                ] ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  320</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820b3e6a52776bf3ed218feba031c609c9826
0e1a52fc1f019683edb6d1c5c4a3790359010fa5010102030358a4a20281
81410004589b8814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe025014
92af1425695e48bf429b2d51f2ab450f8258348614a10500050514a20358
24822f582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d058368614a10501050514a2035824822f582001
23456789abcdeffedcba987654321000112233445566778899aabbccddee
ff0e1a00012c22010f020f074382030f11585b860f8258288614a1050005
0514a115781c687474703a2f2f6578616d706c652e636f6d2f66696c6531
2e62696e58288614a10501050514a115781c687474703a2f2f6578616d70
6c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  396</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820b3e6a52776bf3ed218feba031c609c9826
0e1a52fc1f019683edb6d1c5c4a379584ad28443a10126a0f65840a72d9d
abc04af139a0a5b3ef775234b9ed1c2390e03ffa1454458b2394cca16ace
d37039bbf84ea898a54a242d0d04883f22135a9b98efe042015041f0142d
4e0359010fa5010102030358a4a2028181410004589b8814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258348614a10500050514a2035824822f5820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0583686
14a10501050514a2035824822f58200123456789abcdeffedcba98765432
1000112233445566778899aabbccddeeff0e1a00012c22010f020f074382
030f11585b860f8258288614a10500050514a115781c687474703a2f2f65
78616d706c652e636f6d2f66696c65312e62696e58288614a10501050514
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-from-external-storage"><name>Example 4: Load from External Storage</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load (<xref target="template-load-ext"/>)</t>
</list></t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'838eb848698c9d9dd29b5930102ea1f29743857d975f52ed4d19589b821e82cf'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'42e4185517635842a5715c63772436588c
c366d6a4c2beff3f3e0736806062c4208a756da9cfb0cc1325168eb3c743834b5f5a5d
c00b33acd2a9073c6eb09e5c'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:4,
            / common / 3:<< {
                / components / 2:[
                    [h'00'] ,
                    [h'02'] ,
                    [h'01']
                ],
                / shared-sequence / 4:<< [
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15
                ] >>,
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15
            ] >>,
            / load / 8:<< [
                / directive-set-component-index / 12,2 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ] >>,
                    / image-size / 14:76834,
                    / source-component / 22:0 / [h'00'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-set-component-index / 12,2 ,
                / directive-run / 23,2
            ] >>,
            / payload-fetch / 16:<< [
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:<< [
                        / algorithm-id / -16 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] >>,
                    / uri / 21:'http://example.com/file.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
            / install / 17:<< [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / source-component / 22:1 / [h'02'] /,
                } ,
                / directive-copy / 22,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  327</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820838eb848698c9d9dd29b5930102ea1f297
43857d975f52ed4d19589b821e82cf03590116a801010204035867a20283
814100814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de6
63e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820
00112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100e1987d0010f020f0745840c00030f085838880c0214a3035824822f
58200123456789abcdeffedcba987654321000112233445566778899aabb
ccddeeff0e1a00012c2216001602030f0945840c02170210584e880c0114
a2035824822f582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba987654321015781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e1502030f114b880c0014a116011602030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  403</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820838eb848698c9d9dd29b5930102ea1f297
43857d975f52ed4d19589b821e82cf584ad28443a10126a0f6584042e418
5517635842a5715c63772436588cc366d6a4c2beff3f3e0736806062c420
8a756da9cfb0cc1325168eb3c743834b5f5a5dc00b33acd2a9073c6eb09e
5c03590116a801010204035867a20283814100814102814101045858880c
0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e
48bf429b2d51f2ab45035824822f582000112233445566778899aabbccdd
eeff0123456789abcdeffedcba98765432100e1987d0010f020f0745840c
00030f085838880c0214a3035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c2216001602
030f0945840c02170210584e880c0114a2035824822f5820001122334455
66778899aabbccddeeff0123456789abcdeffedcba987654321015781b68
7474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f
114b880c0014a116011602030f
]]></artwork></figure>

</section>
<section anchor="example-5-two-images"><name>Example 5: Two Images</name>

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
107({
        / authentication-wrapper / 2:<< [
            / digest: / << [
                / algorithm-id / -16 / "sha256" /,
                / digest-bytes /
h'264dc89eb4a39ae7a8ed05e4d6232153bce4fb9a111a31310b90627d1edfc3bb'
            ] >>,
            / signature: / << 18([
                    / protected / << {
                        / alg / 1:-7 / "ES256" /,
                    } >>,
                    / unprotected / {
                    },
                    / payload / F6 / nil /,
                    / signature / h'9350fcb80d59f9be2a923bc144c5f64022
b57d18ccddd9c0477a5be608b04200689373d42fc42fc154dce2d54255d64be9f5bd55
efddb5de22354ec0894e979a'
                ]) >>
            ]
        ] >>,
        / manifest / 3:<< {
            / manifest-version / 1:1,
            / manifest-sequence-number / 2:5,
            / common / 3:<< {
                / components / 2:[
                    [h'00'] ,
                    [h'01']
                ],
                / shared-sequence / 4:<< [
                    / directive-set-component-index / 12,0 ,
                    / directive-override-parameters / 20,{
                        / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                        / class-id /
2:h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                        ] >>,
                        / image-size / 14:34768,
                    } ,
                    / condition-vendor-identifier / 1,15 ,
                    / condition-class-identifier / 2,15 ,
                    / directive-set-component-index / 12,1 ,
                    / directive-override-parameters / 20,{
                        / image-digest / 3:<< [
                            / algorithm-id / -16 / "sha256" /,
                            / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                        ] >>,
                        / image-size / 14:76834,
                    }
                ] >>,
            } >>,
            / validate / 7:<< [
                / directive-set-component-index / 12,0 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / condition-image-match / 3,15
            ] >>,
            / run / 9:<< [
                / directive-set-component-index / 12,0 ,
                / directive-run / 23,2
            ] >>,
            / install / 17:<< [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file1.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / uri / 21:'http://example.com/file2.bin',
                } ,
                / directive-fetch / 21,2 ,
                / condition-image-match / 3,15
            ] >>,
        } >>,
    })
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  306</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
d86ba2025827815824822f5820264dc89eb4a39ae7a8ed05e4d6232153bc
e4fb9a111a31310b90627d1edfc3bb03590101a601010205035895a20282
8141008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab45035824822f5820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f0c0114a2035824822f58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c220749880c
00030f0c01030f0945840c00170211584f900c0014a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0114
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e1502030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  382</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
d86ba2025873825824822f5820264dc89eb4a39ae7a8ed05e4d6232153bc
e4fb9a111a31310b90627d1edfc3bb584ad28443a10126a0f658409350fc
b80d59f9be2a923bc144c5f64022b57d18ccddd9c0477a5be608b0420068
9373d42fc42fc154dce2d54255d64be9f5bd55efddb5de22354ec0894e97
9a03590101a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45035824822f582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
822f58200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c220749880c00030f0c01030f0945840c001702
11584f900c0014a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65312e62696e1502030f0c0114a115781c687474703a2f2f657861
6d706c652e636f6d2f66696c65322e62696e1502030f
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale"><name>Design Rationale</name>

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency's commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level. Dependency handling is covered in <xref target="I-D.ietf-suit-trust-domains"/>.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope"><name>C.1 Design Rationale: Envelope</name>

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers"><name>C.2 Byte String Wrappers</name>

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the shared sequence. The shared sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix"><name>D. Implementation Conformance Matrix</name>

<t>This section summarizes the functionality a minimal manifest processor
implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Check Content</c>
      <c><xref target="suit-condition-check-content"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Component Slot</c>
      <c><xref target="suit-condition-component-slot"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Command_Custom"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c><bcp14>REQUIRED</bcp14> if more than one component</c>
      <c>Write Content</c>
      <c><xref target="suit-directive-write"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c><bcp14>REQUIRED</bcp14> for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Invoke</c>
      <c><xref target="suit-directive-invoke"/></c>
      <c><bcp14>REQUIRED</bcp14> for Bootloader</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c><bcp14>REQUIRED</bcp14></c>
      <c>Component Slot</c>
      <c><xref target="suit-parameter-component-slot"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Content</c>
      <c><xref target="suit-parameter-content"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c><bcp14>REQUIRED</bcp14> for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Invoke Args</c>
      <c><xref target="suit-parameter-invoke-args"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c><bcp14>OPTIONAL</bcp14></c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

